//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Projects/Stratis.DevEx/src/Stratis.DevEx.Ethereum/Solidity.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class SolidityParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, Int=99, Uint=100, Byte=101, Fixed=102, 
		Ufixed=103, BooleanLiteral=104, DecimalNumber=105, HexNumber=106, NumberUnit=107, 
		HexLiteralFragment=108, ReservedKeyword=109, AnonymousKeyword=110, BreakKeyword=111, 
		ConstantKeyword=112, TransientKeyword=113, ImmutableKeyword=114, ContinueKeyword=115, 
		LeaveKeyword=116, ExternalKeyword=117, IndexedKeyword=118, InternalKeyword=119, 
		PayableKeyword=120, PrivateKeyword=121, PublicKeyword=122, VirtualKeyword=123, 
		PureKeyword=124, TypeKeyword=125, ViewKeyword=126, GlobalKeyword=127, 
		ConstructorKeyword=128, FallbackKeyword=129, ReceiveKeyword=130, Identifier=131, 
		StringLiteralFragment=132, VersionLiteral=133, WS=134, COMMENT=135, LINE_COMMENT=136;
	public const int
		RULE_sourceUnit = 0, RULE_pragmaDirective = 1, RULE_pragmaName = 2, RULE_pragmaValue = 3, 
		RULE_version = 4, RULE_versionOperator = 5, RULE_versionConstraint = 6, 
		RULE_importDeclaration = 7, RULE_importDirective = 8, RULE_importPath = 9, 
		RULE_contractDefinition = 10, RULE_inheritanceSpecifier = 11, RULE_customStorageLayout = 12, 
		RULE_contractPart = 13, RULE_stateVariableDeclaration = 14, RULE_fileLevelConstant = 15, 
		RULE_customErrorDefinition = 16, RULE_typeDefinition = 17, RULE_usingForDeclaration = 18, 
		RULE_usingForObject = 19, RULE_usingForObjectDirective = 20, RULE_userDefinableOperators = 21, 
		RULE_structDefinition = 22, RULE_modifierDefinition = 23, RULE_modifierInvocation = 24, 
		RULE_functionDefinition = 25, RULE_functionDescriptor = 26, RULE_returnParameters = 27, 
		RULE_modifierList = 28, RULE_eventDefinition = 29, RULE_enumValue = 30, 
		RULE_enumDefinition = 31, RULE_parameterList = 32, RULE_parameter = 33, 
		RULE_eventParameterList = 34, RULE_eventParameter = 35, RULE_functionTypeParameterList = 36, 
		RULE_functionTypeParameter = 37, RULE_variableDeclaration = 38, RULE_typeName = 39, 
		RULE_userDefinedTypeName = 40, RULE_mappingKey = 41, RULE_mapping = 42, 
		RULE_mappingKeyName = 43, RULE_mappingValueName = 44, RULE_functionTypeName = 45, 
		RULE_storageLocation = 46, RULE_stateMutability = 47, RULE_block = 48, 
		RULE_statement = 49, RULE_expressionStatement = 50, RULE_ifStatement = 51, 
		RULE_tryStatement = 52, RULE_catchClause = 53, RULE_whileStatement = 54, 
		RULE_simpleStatement = 55, RULE_uncheckedStatement = 56, RULE_forStatement = 57, 
		RULE_inlineAssemblyStatement = 58, RULE_inlineAssemblyStatementFlag = 59, 
		RULE_doWhileStatement = 60, RULE_continueStatement = 61, RULE_breakStatement = 62, 
		RULE_returnStatement = 63, RULE_throwStatement = 64, RULE_emitStatement = 65, 
		RULE_revertStatement = 66, RULE_variableDeclarationStatement = 67, RULE_variableDeclarationList = 68, 
		RULE_identifierList = 69, RULE_elementaryTypeName = 70, RULE_expression = 71, 
		RULE_primaryExpression = 72, RULE_expressionList = 73, RULE_nameValueList = 74, 
		RULE_nameValue = 75, RULE_functionCallArguments = 76, RULE_functionCall = 77, 
		RULE_assemblyBlock = 78, RULE_assemblyItem = 79, RULE_assemblyExpression = 80, 
		RULE_assemblyMember = 81, RULE_assemblyCall = 82, RULE_assemblyLocalDefinition = 83, 
		RULE_assemblyAssignment = 84, RULE_assemblyIdentifierOrList = 85, RULE_assemblyIdentifierList = 86, 
		RULE_assemblyStackAssignment = 87, RULE_labelDefinition = 88, RULE_assemblySwitch = 89, 
		RULE_assemblyCase = 90, RULE_assemblyFunctionDefinition = 91, RULE_assemblyFunctionReturns = 92, 
		RULE_assemblyFor = 93, RULE_assemblyIf = 94, RULE_assemblyLiteral = 95, 
		RULE_tupleExpression = 96, RULE_numberLiteral = 97, RULE_identifier = 98, 
		RULE_hexLiteral = 99, RULE_overrideSpecifier = 100, RULE_stringLiteral = 101;
	public static readonly string[] ruleNames = {
		"sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", "version", 
		"versionOperator", "versionConstraint", "importDeclaration", "importDirective", 
		"importPath", "contractDefinition", "inheritanceSpecifier", "customStorageLayout", 
		"contractPart", "stateVariableDeclaration", "fileLevelConstant", "customErrorDefinition", 
		"typeDefinition", "usingForDeclaration", "usingForObject", "usingForObjectDirective", 
		"userDefinableOperators", "structDefinition", "modifierDefinition", "modifierInvocation", 
		"functionDefinition", "functionDescriptor", "returnParameters", "modifierList", 
		"eventDefinition", "enumValue", "enumDefinition", "parameterList", "parameter", 
		"eventParameterList", "eventParameter", "functionTypeParameterList", "functionTypeParameter", 
		"variableDeclaration", "typeName", "userDefinedTypeName", "mappingKey", 
		"mapping", "mappingKeyName", "mappingValueName", "functionTypeName", "storageLocation", 
		"stateMutability", "block", "statement", "expressionStatement", "ifStatement", 
		"tryStatement", "catchClause", "whileStatement", "simpleStatement", "uncheckedStatement", 
		"forStatement", "inlineAssemblyStatement", "inlineAssemblyStatementFlag", 
		"doWhileStatement", "continueStatement", "breakStatement", "returnStatement", 
		"throwStatement", "emitStatement", "revertStatement", "variableDeclarationStatement", 
		"variableDeclarationList", "identifierList", "elementaryTypeName", "expression", 
		"primaryExpression", "expressionList", "nameValueList", "nameValue", "functionCallArguments", 
		"functionCall", "assemblyBlock", "assemblyItem", "assemblyExpression", 
		"assemblyMember", "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", 
		"assemblyIdentifierOrList", "assemblyIdentifierList", "assemblyStackAssignment", 
		"labelDefinition", "assemblySwitch", "assemblyCase", "assemblyFunctionDefinition", 
		"assemblyFunctionReturns", "assemblyFor", "assemblyIf", "assemblyLiteral", 
		"tupleExpression", "numberLiteral", "identifier", "hexLiteral", "overrideSpecifier", 
		"stringLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'pragma'", "';'", "'*'", "'||'", "'^'", "'~'", "'>='", "'>'", "'<'", 
		"'<='", "'='", "'as'", "'import'", "'from'", "'{'", "','", "'}'", "'abstract'", 
		"'contract'", "'interface'", "'library'", "'is'", "'('", "')'", "'layout'", 
		"'at'", "'error'", "'using'", "'for'", "'|'", "'&'", "'+'", "'-'", "'/'", 
		"'%'", "'=='", "'!='", "'struct'", "'modifier'", "'function'", "'returns'", 
		"'event'", "'enum'", "'['", "']'", "'address'", "'.'", "'mapping'", "'=>'", 
		"'memory'", "'storage'", "'calldata'", "'if'", "'else'", "'try'", "'catch'", 
		"'while'", "'unchecked'", "'assembly'", "'do'", "'return'", "'throw'", 
		"'emit'", "'revert'", "'var'", "'bool'", "'string'", "'byte'", "'++'", 
		"'--'", "'new'", "':'", "'delete'", "'!'", "'**'", "'<<'", "'>>'", "'&&'", 
		"'?'", "'|='", "'^='", "'&='", "'<<='", "'>>='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'let'", "':='", "'=:'", "'switch'", "'case'", "'default'", 
		"'->'", "'callback'", "'override'", null, null, null, null, null, null, 
		null, null, null, null, null, "'anonymous'", "'break'", "'constant'", 
		"'transient'", "'immutable'", "'continue'", "'leave'", "'external'", "'indexed'", 
		"'internal'", "'payable'", "'private'", "'public'", "'virtual'", "'pure'", 
		"'type'", "'view'", "'global'", "'constructor'", "'fallback'", "'receive'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "Int", "Uint", "Byte", "Fixed", "Ufixed", "BooleanLiteral", 
		"DecimalNumber", "HexNumber", "NumberUnit", "HexLiteralFragment", "ReservedKeyword", 
		"AnonymousKeyword", "BreakKeyword", "ConstantKeyword", "TransientKeyword", 
		"ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", 
		"IndexedKeyword", "InternalKeyword", "PayableKeyword", "PrivateKeyword", 
		"PublicKeyword", "VirtualKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", 
		"GlobalKeyword", "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", 
		"Identifier", "StringLiteralFragment", "VersionLiteral", "WS", "COMMENT", 
		"LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Solidity.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SolidityParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SolidityParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SolidityParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SolidityParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PragmaDirectiveContext[] pragmaDirective() {
			return GetRuleContexts<PragmaDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaDirectiveContext pragmaDirective(int i) {
			return GetRuleContext<PragmaDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDirectiveContext[] importDirective() {
			return GetRuleContexts<ImportDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDirectiveContext importDirective(int i) {
			return GetRuleContext<ImportDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDefinitionContext[] contractDefinition() {
			return GetRuleContexts<ContractDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractDefinitionContext contractDefinition(int i) {
			return GetRuleContext<ContractDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext[] enumDefinition() {
			return GetRuleContexts<EnumDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext enumDefinition(int i) {
			return GetRuleContext<EnumDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventDefinitionContext[] eventDefinition() {
			return GetRuleContexts<EventDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventDefinitionContext eventDefinition(int i) {
			return GetRuleContext<EventDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext[] structDefinition() {
			return GetRuleContexts<StructDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition(int i) {
			return GetRuleContext<StructDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileLevelConstantContext[] fileLevelConstant() {
			return GetRuleContexts<FileLevelConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileLevelConstantContext fileLevelConstant(int i) {
			return GetRuleContext<FileLevelConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomErrorDefinitionContext[] customErrorDefinition() {
			return GetRuleContexts<CustomErrorDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomErrorDefinitionContext customErrorDefinition(int i) {
			return GetRuleContext<CustomErrorDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext[] typeDefinition() {
			return GetRuleContexts<TypeDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition(int i) {
			return GetRuleContext<TypeDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingForDeclarationContext[] usingForDeclaration() {
			return GetRuleContexts<UsingForDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingForDeclarationContext usingForDeclaration(int i) {
			return GetRuleContext<UsingForDeclarationContext>(i);
		}
		public SourceUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSourceUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSourceUnit(this);
		}
	}

	[RuleVersion(0)]
	public SourceUnitContext sourceUnit() {
		SourceUnitContext _localctx = new SourceUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4870012384600066L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -6840966760233959393L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 15L) != 0)) {
				{
				State = 215;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 204;
					pragmaDirective();
					}
					break;
				case 2:
					{
					State = 205;
					importDirective();
					}
					break;
				case 3:
					{
					State = 206;
					contractDefinition();
					}
					break;
				case 4:
					{
					State = 207;
					enumDefinition();
					}
					break;
				case 5:
					{
					State = 208;
					eventDefinition();
					}
					break;
				case 6:
					{
					State = 209;
					structDefinition();
					}
					break;
				case 7:
					{
					State = 210;
					functionDefinition();
					}
					break;
				case 8:
					{
					State = 211;
					fileLevelConstant();
					}
					break;
				case 9:
					{
					State = 212;
					customErrorDefinition();
					}
					break;
				case 10:
					{
					State = 213;
					typeDefinition();
					}
					break;
				case 11:
					{
					State = 214;
					usingForDeclaration();
					}
					break;
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 220;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PragmaNameContext pragmaName() {
			return GetRuleContext<PragmaNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PragmaValueContext pragmaValue() {
			return GetRuleContext<PragmaValueContext>(0);
		}
		public PragmaDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaDirective(this);
		}
	}

	[RuleVersion(0)]
	public PragmaDirectiveContext pragmaDirective() {
		PragmaDirectiveContext _localctx = new PragmaDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_pragmaDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(T__0);
			State = 223;
			pragmaName();
			State = 224;
			pragmaValue();
			State = 225;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PragmaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaName(this);
		}
	}

	[RuleVersion(0)]
	public PragmaNameContext pragmaName() {
		PragmaNameContext _localctx = new PragmaNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_pragmaName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VersionContext version() {
			return GetRuleContext<VersionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PragmaValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaValue(this);
		}
	}

	[RuleVersion(0)]
	public PragmaValueContext pragmaValue() {
		PragmaValueContext _localctx = new PragmaValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_pragmaValue);
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229;
				Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230;
				version();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 231;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VersionConstraintContext[] versionConstraint() {
			return GetRuleContexts<VersionConstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionConstraintContext versionConstraint(int i) {
			return GetRuleContext<VersionConstraintContext>(i);
		}
		public VersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersion(this);
		}
	}

	[RuleVersion(0)]
	public VersionContext version() {
		VersionContext _localctx = new VersionContext(Context, State);
		EnterRule(_localctx, 8, RULE_version);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			versionConstraint();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4080L) != 0) || _la==DecimalNumber || _la==VersionLiteral) {
				{
				{
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3) {
					{
					State = 235;
					Match(T__3);
					}
				}

				State = 238;
				versionConstraint();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionOperatorContext : ParserRuleContext {
		public VersionOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersionOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersionOperator(this);
		}
	}

	[RuleVersion(0)]
	public VersionOperatorContext versionOperator() {
		VersionOperatorContext _localctx = new VersionOperatorContext(Context, State);
		EnterRule(_localctx, 10, RULE_versionOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4064L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VersionLiteral() { return GetToken(SolidityParser.VersionLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VersionOperatorContext versionOperator() {
			return GetRuleContext<VersionOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalNumber() { return GetToken(SolidityParser.DecimalNumber, 0); }
		public VersionConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersionConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersionConstraint(this);
		}
	}

	[RuleVersion(0)]
	public VersionConstraintContext versionConstraint() {
		VersionConstraintContext _localctx = new VersionConstraintContext(Context, State);
		EnterRule(_localctx, 12, RULE_versionConstraint);
		int _la;
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4064L) != 0)) {
					{
					State = 246;
					versionOperator();
					}
				}

				State = 249;
				Match(VersionLiteral);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4064L) != 0)) {
					{
					State = 250;
					versionOperator();
					}
				}

				State = 253;
				Match(DecimalNumber);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_importDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			identifier();
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 257;
				Match(T__11);
				State = 258;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportPathContext importPath() {
			return GetRuleContext<ImportPathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public ImportDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterImportDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitImportDirective(this);
		}
	}

	[RuleVersion(0)]
	public ImportDirectiveContext importDirective() {
		ImportDirectiveContext _localctx = new ImportDirectiveContext(Context, State);
		EnterRule(_localctx, 16, RULE_importDirective);
		int _la;
		try {
			State = 297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261;
				Match(T__12);
				State = 262;
				importPath();
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__11) {
					{
					State = 263;
					Match(T__11);
					State = 264;
					identifier();
					}
				}

				State = 267;
				Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269;
				Match(T__12);
				State = 272;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 270;
					Match(T__2);
					}
					break;
				case T__13:
				case T__24:
				case T__25:
				case T__26:
				case T__45:
				case T__51:
				case T__63:
				case T__96:
				case LeaveKeyword:
				case PayableKeyword:
				case GlobalKeyword:
				case ConstructorKeyword:
				case ReceiveKeyword:
				case Identifier:
					{
					State = 271;
					identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__11) {
					{
					State = 274;
					Match(T__11);
					State = 275;
					identifier();
					}
				}

				State = 278;
				Match(T__13);
				State = 279;
				importPath();
				State = 280;
				Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 282;
				Match(T__12);
				State = 283;
				Match(T__14);
				State = 284;
				importDeclaration();
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 285;
					Match(T__15);
					State = 286;
					importDeclaration();
					}
					}
					State = 291;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 292;
				Match(T__16);
				State = 293;
				Match(T__13);
				State = 294;
				importPath();
				State = 295;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteralFragment() { return GetToken(SolidityParser.StringLiteralFragment, 0); }
		public ImportPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterImportPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitImportPath(this);
		}
	}

	[RuleVersion(0)]
	public ImportPathContext importPath() {
		ImportPathContext _localctx = new ImportPathContext(Context, State);
		EnterRule(_localctx, 18, RULE_importPath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(StringLiteralFragment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomStorageLayoutContext[] customStorageLayout() {
			return GetRuleContexts<CustomStorageLayoutContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomStorageLayoutContext customStorageLayout(int i) {
			return GetRuleContext<CustomStorageLayoutContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritanceSpecifierContext[] inheritanceSpecifier() {
			return GetRuleContexts<InheritanceSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritanceSpecifierContext inheritanceSpecifier(int i) {
			return GetRuleContext<InheritanceSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractPartContext[] contractPart() {
			return GetRuleContexts<ContractPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContractPartContext contractPart(int i) {
			return GetRuleContext<ContractPartContext>(i);
		}
		public ContractDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContractDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContractDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ContractDefinitionContext contractDefinition() {
		ContractDefinitionContext _localctx = new ContractDefinitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_contractDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 301;
				Match(T__17);
				}
			}

			State = 304;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 305;
			identifier();
			State = 307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 306;
				customStorageLayout();
				}
				break;
			}
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 309;
				Match(T__21);
				State = 310;
				inheritanceSpecifier();
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 311;
					Match(T__15);
					State = 312;
					inheritanceSpecifier();
					}
					}
					State = 317;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__24) {
				{
				State = 320;
				customStorageLayout();
				}
			}

			State = 323;
			Match(T__14);
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 34903194387642369L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 33563345021L) != 0)) {
				{
				{
				State = 324;
				contractPart();
				}
				}
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 330;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritanceSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public InheritanceSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritanceSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterInheritanceSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitInheritanceSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public InheritanceSpecifierContext inheritanceSpecifier() {
		InheritanceSpecifierContext _localctx = new InheritanceSpecifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_inheritanceSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			userDefinedTypeName();
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 333;
				Match(T__22);
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & -288154217586491135L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 8540021574059687963L) != 0)) {
					{
					State = 334;
					expressionList();
					}
				}

				State = 337;
				Match(T__23);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomStorageLayoutContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CustomStorageLayoutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customStorageLayout; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterCustomStorageLayout(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitCustomStorageLayout(this);
		}
	}

	[RuleVersion(0)]
	public CustomStorageLayoutContext customStorageLayout() {
		CustomStorageLayoutContext _localctx = new CustomStorageLayoutContext(Context, State);
		EnterRule(_localctx, 24, RULE_customStorageLayout);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 340;
			Match(T__24);
			State = 341;
			Match(T__25);
			State = 342;
			expression(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StateVariableDeclarationContext stateVariableDeclaration() {
			return GetRuleContext<StateVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingForDeclarationContext usingForDeclaration() {
			return GetRuleContext<UsingForDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierDefinitionContext modifierDefinition() {
			return GetRuleContext<ModifierDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventDefinitionContext eventDefinition() {
			return GetRuleContext<EventDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomErrorDefinitionContext customErrorDefinition() {
			return GetRuleContext<CustomErrorDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefinitionContext typeDefinition() {
			return GetRuleContext<TypeDefinitionContext>(0);
		}
		public ContractPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContractPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContractPart(this);
		}
	}

	[RuleVersion(0)]
	public ContractPartContext contractPart() {
		ContractPartContext _localctx = new ContractPartContext(Context, State);
		EnterRule(_localctx, 26, RULE_contractPart);
		try {
			State = 353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 344;
				stateVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 345;
				usingForDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 346;
				structDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 347;
				modifierDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 348;
				functionDefinition();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 349;
				eventDefinition();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 350;
				enumDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 351;
				customErrorDefinition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 352;
				typeDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PublicKeyword() { return GetTokens(SolidityParser.PublicKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PublicKeyword(int i) {
			return GetToken(SolidityParser.PublicKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PrivateKeyword() { return GetTokens(SolidityParser.PrivateKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrivateKeyword(int i) {
			return GetToken(SolidityParser.PrivateKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ConstantKeyword() { return GetTokens(SolidityParser.ConstantKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConstantKeyword(int i) {
			return GetToken(SolidityParser.ConstantKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TransientKeyword() { return GetTokens(SolidityParser.TransientKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TransientKeyword(int i) {
			return GetToken(SolidityParser.TransientKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ImmutableKeyword() { return GetTokens(SolidityParser.ImmutableKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ImmutableKeyword(int i) {
			return GetToken(SolidityParser.ImmutableKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OverrideSpecifierContext[] overrideSpecifier() {
			return GetRuleContexts<OverrideSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OverrideSpecifierContext overrideSpecifier(int i) {
			return GetRuleContext<OverrideSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StateVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStateVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStateVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public StateVariableDeclarationContext stateVariableDeclaration() {
		StateVariableDeclarationContext _localctx = new StateVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_stateVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			typeName(0);
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 27377665L) != 0)) {
				{
				State = 363;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PublicKeyword:
					{
					State = 356;
					Match(PublicKeyword);
					}
					break;
				case InternalKeyword:
					{
					State = 357;
					Match(InternalKeyword);
					}
					break;
				case PrivateKeyword:
					{
					State = 358;
					Match(PrivateKeyword);
					}
					break;
				case ConstantKeyword:
					{
					State = 359;
					Match(ConstantKeyword);
					}
					break;
				case TransientKeyword:
					{
					State = 360;
					Match(TransientKeyword);
					}
					break;
				case ImmutableKeyword:
					{
					State = 361;
					Match(ImmutableKeyword);
					}
					break;
				case T__97:
					{
					State = 362;
					overrideSpecifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 368;
			identifier();
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 369;
				Match(T__10);
				State = 370;
				expression(0);
				}
			}

			State = 373;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileLevelConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConstantKeyword() { return GetToken(SolidityParser.ConstantKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FileLevelConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileLevelConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFileLevelConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFileLevelConstant(this);
		}
	}

	[RuleVersion(0)]
	public FileLevelConstantContext fileLevelConstant() {
		FileLevelConstantContext _localctx = new FileLevelConstantContext(Context, State);
		EnterRule(_localctx, 30, RULE_fileLevelConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			typeName(0);
			State = 376;
			Match(ConstantKeyword);
			State = 377;
			identifier();
			State = 378;
			Match(T__10);
			State = 379;
			expression(0);
			State = 380;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomErrorDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public CustomErrorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customErrorDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterCustomErrorDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitCustomErrorDefinition(this);
		}
	}

	[RuleVersion(0)]
	public CustomErrorDefinitionContext customErrorDefinition() {
		CustomErrorDefinitionContext _localctx = new CustomErrorDefinitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_customErrorDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(T__26);
			State = 383;
			identifier();
			State = 384;
			parameterList();
			State = 385;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeKeyword() { return GetToken(SolidityParser.TypeKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTypeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTypeDefinition(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			Match(TypeKeyword);
			State = 388;
			identifier();
			State = 389;
			Match(T__21);
			State = 390;
			elementaryTypeName();
			State = 391;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingForDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UsingForObjectContext usingForObject() {
			return GetRuleContext<UsingForObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GlobalKeyword() { return GetToken(SolidityParser.GlobalKeyword, 0); }
		public UsingForDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingForDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUsingForDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUsingForDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public UsingForDeclarationContext usingForDeclaration() {
		UsingForDeclarationContext _localctx = new UsingForDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_usingForDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			Match(T__27);
			State = 394;
			usingForObject();
			State = 395;
			Match(T__28);
			State = 398;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 396;
				Match(T__2);
				}
				break;
			case T__13:
			case T__24:
			case T__25:
			case T__26:
			case T__39:
			case T__45:
			case T__47:
			case T__51:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__96:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case LeaveKeyword:
			case PayableKeyword:
			case GlobalKeyword:
			case ConstructorKeyword:
			case ReceiveKeyword:
			case Identifier:
				{
				State = 397;
				typeName(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GlobalKeyword) {
				{
				State = 400;
				Match(GlobalKeyword);
				}
			}

			State = 403;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingForObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingForObjectDirectiveContext[] usingForObjectDirective() {
			return GetRuleContexts<UsingForObjectDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingForObjectDirectiveContext usingForObjectDirective(int i) {
			return GetRuleContext<UsingForObjectDirectiveContext>(i);
		}
		public UsingForObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingForObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUsingForObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUsingForObject(this);
		}
	}

	[RuleVersion(0)]
	public UsingForObjectContext usingForObject() {
		UsingForObjectContext _localctx = new UsingForObjectContext(Context, State);
		EnterRule(_localctx, 38, RULE_usingForObject);
		int _la;
		try {
			State = 417;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
			case T__24:
			case T__25:
			case T__26:
			case T__45:
			case T__51:
			case T__63:
			case T__96:
			case LeaveKeyword:
			case PayableKeyword:
			case GlobalKeyword:
			case ConstructorKeyword:
			case ReceiveKeyword:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405;
				userDefinedTypeName();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406;
				Match(T__14);
				State = 407;
				usingForObjectDirective();
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 408;
					Match(T__15);
					State = 409;
					usingForObjectDirective();
					}
					}
					State = 414;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 415;
				Match(T__16);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingForObjectDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinableOperatorsContext userDefinableOperators() {
			return GetRuleContext<UserDefinableOperatorsContext>(0);
		}
		public UsingForObjectDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingForObjectDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUsingForObjectDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUsingForObjectDirective(this);
		}
	}

	[RuleVersion(0)]
	public UsingForObjectDirectiveContext usingForObjectDirective() {
		UsingForObjectDirectiveContext _localctx = new UsingForObjectDirectiveContext(Context, State);
		EnterRule(_localctx, 40, RULE_usingForObjectDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			userDefinedTypeName();
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 420;
				Match(T__11);
				State = 421;
				userDefinableOperators();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserDefinableOperatorsContext : ParserRuleContext {
		public UserDefinableOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userDefinableOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUserDefinableOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUserDefinableOperators(this);
		}
	}

	[RuleVersion(0)]
	public UserDefinableOperatorsContext userDefinableOperators() {
		UserDefinableOperatorsContext _localctx = new UserDefinableOperatorsContext(Context, State);
		EnterRule(_localctx, 42, RULE_userDefinableOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 273804167144L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(T__37);
			State = 427;
			identifier();
			State = 428;
			Match(T__14);
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 34903193531987969L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942269L) != 0)) {
				{
				State = 429;
				variableDeclaration();
				State = 430;
				Match(T__1);
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 34903193531987969L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942269L) != 0)) {
					{
					{
					State = 431;
					variableDeclaration();
					State = 432;
					Match(T__1);
					}
					}
					State = 438;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 441;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VirtualKeyword() { return GetTokens(SolidityParser.VirtualKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VirtualKeyword(int i) {
			return GetToken(SolidityParser.VirtualKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OverrideSpecifierContext[] overrideSpecifier() {
			return GetRuleContexts<OverrideSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OverrideSpecifierContext overrideSpecifier(int i) {
			return GetRuleContext<OverrideSpecifierContext>(i);
		}
		public ModifierDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ModifierDefinitionContext modifierDefinition() {
		ModifierDefinitionContext _localctx = new ModifierDefinitionContext(Context, State);
		EnterRule(_localctx, 46, RULE_modifierDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(T__38);
			State = 444;
			identifier();
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 445;
				parameterList();
				}
			}

			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__97 || _la==VirtualKeyword) {
				{
				State = 450;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VirtualKeyword:
					{
					State = 448;
					Match(VirtualKeyword);
					}
					break;
				case T__97:
					{
					State = 449;
					overrideSpecifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 457;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 455;
				Match(T__1);
				}
				break;
			case T__14:
				{
				State = 456;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ModifierInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierInvocation(this);
		}
	}

	[RuleVersion(0)]
	public ModifierInvocationContext modifierInvocation() {
		ModifierInvocationContext _localctx = new ModifierInvocationContext(Context, State);
		EnterRule(_localctx, 48, RULE_modifierInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			identifier();
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 460;
				Match(T__22);
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & -288154217586491135L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 8540021574059687963L) != 0)) {
					{
					State = 461;
					expressionList();
					}
				}

				State = 464;
				Match(T__23);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDescriptorContext functionDescriptor() {
			return GetRuleContext<FunctionDescriptorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnParametersContext returnParameters() {
			return GetRuleContext<ReturnParametersContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			functionDescriptor();
			State = 468;
			parameterList();
			State = 469;
			modifierList();
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__40) {
				{
				State = 470;
				returnParameters();
				}
			}

			State = 475;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 473;
				Match(T__1);
				}
				break;
			case T__14:
				{
				State = 474;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDescriptorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConstructorKeyword() { return GetToken(SolidityParser.ConstructorKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FallbackKeyword() { return GetToken(SolidityParser.FallbackKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReceiveKeyword() { return GetToken(SolidityParser.ReceiveKeyword, 0); }
		public FunctionDescriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDescriptor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionDescriptor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionDescriptor(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDescriptorContext functionDescriptor() {
		FunctionDescriptorContext _localctx = new FunctionDescriptorContext(Context, State);
		EnterRule(_localctx, 52, RULE_functionDescriptor);
		int _la;
		try {
			State = 484;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__39:
				EnterOuterAlt(_localctx, 1);
				{
				State = 477;
				Match(T__39);
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 1126179079731201L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942145L) != 0)) {
					{
					State = 478;
					identifier();
					}
				}

				}
				break;
			case ConstructorKeyword:
				EnterOuterAlt(_localctx, 2);
				{
				State = 481;
				Match(ConstructorKeyword);
				}
				break;
			case FallbackKeyword:
				EnterOuterAlt(_localctx, 3);
				{
				State = 482;
				Match(FallbackKeyword);
				}
				break;
			case ReceiveKeyword:
				EnterOuterAlt(_localctx, 4);
				{
				State = 483;
				Match(ReceiveKeyword);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterReturnParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitReturnParameters(this);
		}
	}

	[RuleVersion(0)]
	public ReturnParametersContext returnParameters() {
		ReturnParametersContext _localctx = new ReturnParametersContext(Context, State);
		EnterRule(_localctx, 54, RULE_returnParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			Match(T__40);
			State = 487;
			parameterList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ExternalKeyword() { return GetTokens(SolidityParser.ExternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExternalKeyword(int i) {
			return GetToken(SolidityParser.ExternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PublicKeyword() { return GetTokens(SolidityParser.PublicKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PublicKeyword(int i) {
			return GetToken(SolidityParser.PublicKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PrivateKeyword() { return GetTokens(SolidityParser.PrivateKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrivateKeyword(int i) {
			return GetToken(SolidityParser.PrivateKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VirtualKeyword() { return GetTokens(SolidityParser.VirtualKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VirtualKeyword(int i) {
			return GetToken(SolidityParser.VirtualKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateMutabilityContext[] stateMutability() {
			return GetRuleContexts<StateMutabilityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateMutabilityContext stateMutability(int i) {
			return GetRuleContext<StateMutabilityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierInvocationContext[] modifierInvocation() {
			return GetRuleContexts<ModifierInvocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierInvocationContext modifierInvocation(int i) {
			return GetRuleContext<ModifierInvocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OverrideSpecifierContext[] overrideSpecifier() {
			return GetRuleContexts<OverrideSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OverrideSpecifierContext overrideSpecifier(int i) {
			return GetRuleContext<OverrideSpecifierContext>(i);
		}
		public ModifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierList(this);
		}
	}

	[RuleVersion(0)]
	public ModifierListContext modifierList() {
		ModifierListContext _localctx = new ModifierListContext(Context, State);
		EnterRule(_localctx, 56, RULE_modifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 1126179079731201L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 29793746947L) != 0)) {
				{
				State = 497;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 489;
					Match(ExternalKeyword);
					}
					break;
				case 2:
					{
					State = 490;
					Match(PublicKeyword);
					}
					break;
				case 3:
					{
					State = 491;
					Match(InternalKeyword);
					}
					break;
				case 4:
					{
					State = 492;
					Match(PrivateKeyword);
					}
					break;
				case 5:
					{
					State = 493;
					Match(VirtualKeyword);
					}
					break;
				case 6:
					{
					State = 494;
					stateMutability();
					}
					break;
				case 7:
					{
					State = 495;
					modifierInvocation();
					}
					break;
				case 8:
					{
					State = 496;
					overrideSpecifier();
					}
					break;
				}
				}
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventParameterListContext eventParameterList() {
			return GetRuleContext<EventParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AnonymousKeyword() { return GetToken(SolidityParser.AnonymousKeyword, 0); }
		public EventDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventDefinition(this);
		}
	}

	[RuleVersion(0)]
	public EventDefinitionContext eventDefinition() {
		EventDefinitionContext _localctx = new EventDefinitionContext(Context, State);
		EnterRule(_localctx, 58, RULE_eventDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			Match(T__41);
			State = 503;
			identifier();
			State = 504;
			eventParameterList();
			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AnonymousKeyword) {
				{
				State = 505;
				Match(AnonymousKeyword);
				}
			}

			State = 508;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 60, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 62, RULE_enumDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			Match(T__42);
			State = 513;
			identifier();
			State = 514;
			Match(T__14);
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 1126179079731201L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942145L) != 0)) {
				{
				State = 515;
				enumValue();
				}
			}

			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 518;
				Match(T__15);
				State = 519;
				enumValue();
				}
				}
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 525;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 64, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			Match(T__22);
			State = 536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 34903193531987969L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942269L) != 0)) {
				{
				State = 528;
				parameter();
				State = 533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 529;
					Match(T__15);
					State = 530;
					parameter();
					}
					}
					State = 535;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 538;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 66, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			typeName(0);
			State = 542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 541;
				storageLocation();
				}
				break;
			}
			State = 545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 1126179079731201L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942145L) != 0)) {
				{
				State = 544;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EventParameterContext[] eventParameter() {
			return GetRuleContexts<EventParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventParameterContext eventParameter(int i) {
			return GetRuleContext<EventParameterContext>(i);
		}
		public EventParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventParameterList(this);
		}
	}

	[RuleVersion(0)]
	public EventParameterListContext eventParameterList() {
		EventParameterListContext _localctx = new EventParameterListContext(Context, State);
		EnterRule(_localctx, 68, RULE_eventParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			Match(T__22);
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 34903193531987969L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942269L) != 0)) {
				{
				State = 548;
				eventParameter();
				State = 553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 549;
					Match(T__15);
					State = 550;
					eventParameter();
					}
					}
					State = 555;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 558;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IndexedKeyword() { return GetToken(SolidityParser.IndexedKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EventParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventParameter(this);
		}
	}

	[RuleVersion(0)]
	public EventParameterContext eventParameter() {
		EventParameterContext _localctx = new EventParameterContext(Context, State);
		EnterRule(_localctx, 70, RULE_eventParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			typeName(0);
			State = 562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IndexedKeyword) {
				{
				State = 561;
				Match(IndexedKeyword);
				}
			}

			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 1126179079731201L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942145L) != 0)) {
				{
				State = 564;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeParameterContext[] functionTypeParameter() {
			return GetRuleContexts<FunctionTypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeParameterContext functionTypeParameter(int i) {
			return GetRuleContext<FunctionTypeParameterContext>(i);
		}
		public FunctionTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionTypeParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionTypeParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeParameterListContext functionTypeParameterList() {
		FunctionTypeParameterListContext _localctx = new FunctionTypeParameterListContext(Context, State);
		EnterRule(_localctx, 72, RULE_functionTypeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			Match(T__22);
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 34903193531987969L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942269L) != 0)) {
				{
				State = 568;
				functionTypeParameter();
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 569;
					Match(T__15);
					State = 570;
					functionTypeParameter();
					}
					}
					State = 575;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 578;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		public FunctionTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionTypeParameter(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeParameterContext functionTypeParameter() {
		FunctionTypeParameterContext _localctx = new FunctionTypeParameterContext(Context, State);
		EnterRule(_localctx, 74, RULE_functionTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			typeName(0);
			State = 582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7881299347898368L) != 0)) {
				{
				State = 581;
				storageLocation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			typeName(0);
			State = 586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 585;
				storageLocation();
				}
				break;
			}
			State = 588;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MappingContext mapping() {
			return GetRuleContext<MappingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeNameContext functionTypeName() {
			return GetRuleContext<FunctionTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		return typeName(0);
	}

	private TypeNameContext typeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeNameContext _localctx = new TypeNameContext(Context, _parentState);
		TypeNameContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_typeName, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 591;
				elementaryTypeName();
				}
				break;
			case 2:
				{
				State = 592;
				userDefinedTypeName();
				}
				break;
			case 3:
				{
				State = 593;
				mapping();
				}
				break;
			case 4:
				{
				State = 594;
				functionTypeName();
				}
				break;
			case 5:
				{
				State = 595;
				Match(T__45);
				State = 596;
				Match(PayableKeyword);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 607;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeName);
					State = 599;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 600;
					Match(T__43);
					State = 602;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & -288154217586491135L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 8540021574059687963L) != 0)) {
						{
						State = 601;
						expression(0);
						}
					}

					State = 604;
					Match(T__44);
					}
					} 
				}
				State = 609;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UserDefinedTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public UserDefinedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userDefinedTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUserDefinedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUserDefinedTypeName(this);
		}
	}

	[RuleVersion(0)]
	public UserDefinedTypeNameContext userDefinedTypeName() {
		UserDefinedTypeNameContext _localctx = new UserDefinedTypeNameContext(Context, State);
		EnterRule(_localctx, 80, RULE_userDefinedTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 610;
			identifier();
			State = 615;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 611;
					Match(T__46);
					State = 612;
					identifier();
					}
					} 
				}
				State = 617;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MappingKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		public MappingKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mappingKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterMappingKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitMappingKey(this);
		}
	}

	[RuleVersion(0)]
	public MappingKeyContext mappingKey() {
		MappingKeyContext _localctx = new MappingKeyContext(Context, State);
		EnterRule(_localctx, 82, RULE_mappingKey);
		try {
			State = 620;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 618;
				elementaryTypeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 619;
				userDefinedTypeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MappingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MappingKeyContext mappingKey() {
			return GetRuleContext<MappingKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MappingKeyNameContext mappingKeyName() {
			return GetRuleContext<MappingKeyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MappingValueNameContext mappingValueName() {
			return GetRuleContext<MappingValueNameContext>(0);
		}
		public MappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapping; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterMapping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitMapping(this);
		}
	}

	[RuleVersion(0)]
	public MappingContext mapping() {
		MappingContext _localctx = new MappingContext(Context, State);
		EnterRule(_localctx, 84, RULE_mapping);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			Match(T__47);
			State = 623;
			Match(T__22);
			State = 624;
			mappingKey();
			State = 626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 1126179079731201L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942145L) != 0)) {
				{
				State = 625;
				mappingKeyName();
				}
			}

			State = 628;
			Match(T__48);
			State = 629;
			typeName(0);
			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 1126179079731201L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942145L) != 0)) {
				{
				State = 630;
				mappingValueName();
				}
			}

			State = 633;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MappingKeyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MappingKeyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mappingKeyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterMappingKeyName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitMappingKeyName(this);
		}
	}

	[RuleVersion(0)]
	public MappingKeyNameContext mappingKeyName() {
		MappingKeyNameContext _localctx = new MappingKeyNameContext(Context, State);
		EnterRule(_localctx, 86, RULE_mappingKeyName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MappingValueNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MappingValueNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mappingValueName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterMappingValueName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitMappingValueName(this);
		}
	}

	[RuleVersion(0)]
	public MappingValueNameContext mappingValueName() {
		MappingValueNameContext _localctx = new MappingValueNameContext(Context, State);
		EnterRule(_localctx, 88, RULE_mappingValueName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeParameterListContext[] functionTypeParameterList() {
			return GetRuleContexts<FunctionTypeParameterListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeParameterListContext functionTypeParameterList(int i) {
			return GetRuleContext<FunctionTypeParameterListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ExternalKeyword() { return GetTokens(SolidityParser.ExternalKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExternalKeyword(int i) {
			return GetToken(SolidityParser.ExternalKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateMutabilityContext[] stateMutability() {
			return GetRuleContexts<StateMutabilityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StateMutabilityContext stateMutability(int i) {
			return GetRuleContext<StateMutabilityContext>(i);
		}
		public FunctionTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionTypeName(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeNameContext functionTypeName() {
		FunctionTypeNameContext _localctx = new FunctionTypeNameContext(Context, State);
		EnterRule(_localctx, 90, RULE_functionTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			Match(T__39);
			State = 640;
			functionTypeParameterList();
			State = 646;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 644;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case InternalKeyword:
						{
						State = 641;
						Match(InternalKeyword);
						}
						break;
					case ExternalKeyword:
						{
						State = 642;
						Match(ExternalKeyword);
						}
						break;
					case ConstantKeyword:
					case PayableKeyword:
					case PureKeyword:
					case ViewKeyword:
						{
						State = 643;
						stateMutability();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 648;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
			}
			State = 651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 649;
				Match(T__40);
				State = 650;
				functionTypeParameterList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageLocationContext : ParserRuleContext {
		public StorageLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStorageLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStorageLocation(this);
		}
	}

	[RuleVersion(0)]
	public StorageLocationContext storageLocation() {
		StorageLocationContext _localctx = new StorageLocationContext(Context, State);
		EnterRule(_localctx, 92, RULE_storageLocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7881299347898368L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateMutabilityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PureKeyword() { return GetToken(SolidityParser.PureKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConstantKeyword() { return GetToken(SolidityParser.ConstantKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ViewKeyword() { return GetToken(SolidityParser.ViewKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		public StateMutabilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateMutability; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStateMutability(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStateMutability(this);
		}
	}

	[RuleVersion(0)]
	public StateMutabilityContext stateMutability() {
		StateMutabilityContext _localctx = new StateMutabilityContext(Context, State);
		EnterRule(_localctx, 94, RULE_stateMutability);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 20737L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 96, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			Match(T__14);
			State = 661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & -1471953798298879L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 8540058957455032347L) != 0)) {
				{
				{
				State = 658;
				statement();
				}
				}
				State = 663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 664;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineAssemblyStatementContext inlineAssemblyStatement() {
			return GetRuleContext<InlineAssemblyStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmitStatementContext emitStatement() {
			return GetRuleContext<EmitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UncheckedStatementContext uncheckedStatement() {
			return GetRuleContext<UncheckedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevertStatementContext revertStatement() {
			return GetRuleContext<RevertStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_statement);
		try {
			State = 681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 666;
				ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 667;
				tryStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 668;
				whileStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 669;
				forStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 670;
				block();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 671;
				inlineAssemblyStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 672;
				doWhileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 673;
				continueStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 674;
				breakStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 675;
				returnStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 676;
				throwStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 677;
				emitStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 678;
				simpleStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 679;
				uncheckedStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 680;
				revertStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			expression(0);
			State = 684;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			Match(T__52);
			State = 687;
			Match(T__22);
			State = 688;
			expression(0);
			State = 689;
			Match(T__23);
			State = 690;
			statement();
			State = 693;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 691;
				Match(T__53);
				State = 692;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnParametersContext returnParameters() {
			return GetRuleContext<ReturnParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_tryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			Match(T__54);
			State = 696;
			expression(0);
			State = 698;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__40) {
				{
				State = 697;
				returnParameters();
				}
			}

			State = 700;
			block();
			State = 702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 701;
				catchClause();
				}
				}
				State = 704;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__55 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(Context, State);
		EnterRule(_localctx, 106, RULE_catchClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			Match(T__55);
			State = 711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 1126179079731713L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942145L) != 0)) {
				{
				State = 708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 1126179079731201L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942145L) != 0)) {
					{
					State = 707;
					identifier();
					}
				}

				State = 710;
				parameterList();
				}
			}

			State = 713;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715;
			Match(T__56);
			State = 716;
			Match(T__22);
			State = 717;
			expression(0);
			State = 718;
			Match(T__23);
			State = 719;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 721;
				variableDeclarationStatement();
				}
				break;
			case 2:
				{
				State = 722;
				expressionStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UncheckedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UncheckedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uncheckedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUncheckedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUncheckedStatement(this);
		}
	}

	[RuleVersion(0)]
	public UncheckedStatementContext uncheckedStatement() {
		UncheckedStatementContext _localctx = new UncheckedStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_uncheckedStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725;
			Match(T__57);
			State = 726;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			Match(T__28);
			State = 729;
			Match(T__22);
			State = 732;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case T__13:
			case T__22:
			case T__24:
			case T__25:
			case T__26:
			case T__31:
			case T__32:
			case T__39:
			case T__43:
			case T__45:
			case T__47:
			case T__51:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__72:
			case T__73:
			case T__96:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteralFragment:
			case LeaveKeyword:
			case PayableKeyword:
			case TypeKeyword:
			case GlobalKeyword:
			case ConstructorKeyword:
			case ReceiveKeyword:
			case Identifier:
			case StringLiteralFragment:
				{
				State = 730;
				simpleStatement();
				}
				break;
			case T__1:
				{
				State = 731;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 736;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case T__13:
			case T__22:
			case T__24:
			case T__25:
			case T__26:
			case T__31:
			case T__32:
			case T__39:
			case T__43:
			case T__45:
			case T__47:
			case T__51:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__72:
			case T__73:
			case T__96:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteralFragment:
			case LeaveKeyword:
			case PayableKeyword:
			case TypeKeyword:
			case GlobalKeyword:
			case ConstructorKeyword:
			case ReceiveKeyword:
			case Identifier:
			case StringLiteralFragment:
				{
				State = 734;
				expressionStatement();
				}
				break;
			case T__1:
				{
				State = 735;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & -288154217586491135L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 8540021574059687963L) != 0)) {
				{
				State = 738;
				expression(0);
				}
			}

			State = 741;
			Match(T__23);
			State = 742;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineAssemblyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteralFragment() { return GetToken(SolidityParser.StringLiteralFragment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InlineAssemblyStatementFlagContext inlineAssemblyStatementFlag() {
			return GetRuleContext<InlineAssemblyStatementFlagContext>(0);
		}
		public InlineAssemblyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineAssemblyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterInlineAssemblyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitInlineAssemblyStatement(this);
		}
	}

	[RuleVersion(0)]
	public InlineAssemblyStatementContext inlineAssemblyStatement() {
		InlineAssemblyStatementContext _localctx = new InlineAssemblyStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_inlineAssemblyStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744;
			Match(T__58);
			State = 746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringLiteralFragment) {
				{
				State = 745;
				Match(StringLiteralFragment);
				}
			}

			State = 752;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 748;
				Match(T__22);
				State = 749;
				inlineAssemblyStatementFlag();
				State = 750;
				Match(T__23);
				}
			}

			State = 754;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineAssemblyStatementFlagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public InlineAssemblyStatementFlagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineAssemblyStatementFlag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterInlineAssemblyStatementFlag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitInlineAssemblyStatementFlag(this);
		}
	}

	[RuleVersion(0)]
	public InlineAssemblyStatementFlagContext inlineAssemblyStatementFlag() {
		InlineAssemblyStatementFlagContext _localctx = new InlineAssemblyStatementFlagContext(Context, State);
		EnterRule(_localctx, 118, RULE_inlineAssemblyStatementFlag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756;
			stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758;
			Match(T__59);
			State = 759;
			statement();
			State = 760;
			Match(T__56);
			State = 761;
			Match(T__22);
			State = 762;
			expression(0);
			State = 763;
			Match(T__23);
			State = 764;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ContinueKeyword() { return GetToken(SolidityParser.ContinueKeyword, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 766;
			Match(ContinueKeyword);
			State = 767;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BreakKeyword() { return GetToken(SolidityParser.BreakKeyword, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 124, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			Match(BreakKeyword);
			State = 770;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 126, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			Match(T__60);
			State = 774;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & -288154217586491135L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 8540021574059687963L) != 0)) {
				{
				State = 773;
				expression(0);
				}
			}

			State = 776;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778;
			Match(T__61);
			State = 779;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public EmitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEmitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEmitStatement(this);
		}
	}

	[RuleVersion(0)]
	public EmitStatementContext emitStatement() {
		EmitStatementContext _localctx = new EmitStatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_emitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			Match(T__62);
			State = 782;
			functionCall();
			State = 783;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevertStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public RevertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterRevertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitRevertStatement(this);
		}
	}

	[RuleVersion(0)]
	public RevertStatementContext revertStatement() {
		RevertStatementContext _localctx = new RevertStatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_revertStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785;
			Match(T__63);
			State = 786;
			functionCall();
			State = 787;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_variableDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 789;
				Match(T__64);
				State = 790;
				identifierList();
				}
				break;
			case 2:
				{
				State = 791;
				variableDeclaration();
				}
				break;
			case 3:
				{
				State = 792;
				Match(T__22);
				State = 793;
				variableDeclarationList();
				State = 794;
				Match(T__23);
				}
				break;
			}
			State = 800;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 798;
				Match(T__10);
				State = 799;
				expression(0);
				}
			}

			State = 802;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 136, RULE_variableDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 34903193531987969L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942269L) != 0)) {
				{
				State = 804;
				variableDeclaration();
				}
			}

			State = 813;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 807;
				Match(T__15);
				State = 809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 34903193531987969L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942269L) != 0)) {
					{
					State = 808;
					variableDeclaration();
					}
				}

				}
				}
				State = 815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 138, RULE_identifierList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 816;
			Match(T__22);
			State = 823;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 818;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 1126179079731201L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942145L) != 0)) {
						{
						State = 817;
						identifier();
						}
					}

					State = 820;
					Match(T__15);
					}
					} 
				}
				State = 825;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			}
			State = 827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 1126179079731201L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942145L) != 0)) {
				{
				State = 826;
				identifier();
				}
			}

			State = 829;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementaryTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(SolidityParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Uint() { return GetToken(SolidityParser.Uint, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Byte() { return GetToken(SolidityParser.Byte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fixed() { return GetToken(SolidityParser.Fixed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ufixed() { return GetToken(SolidityParser.Ufixed, 0); }
		public ElementaryTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementaryTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterElementaryTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitElementaryTypeName(this);
		}
	}

	[RuleVersion(0)]
	public ElementaryTypeNameContext elementaryTypeName() {
		ElementaryTypeNameContext _localctx = new ElementaryTypeNameContext(Context, State);
		EnterRule(_localctx, 140, RULE_elementaryTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 831;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & 279223176904835073L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameValueListContext nameValueList() {
			return GetRuleContext<NameValueListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgumentsContext functionCallArguments() {
			return GetRuleContext<FunctionCallArgumentsContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 142;
		EnterRecursionRule(_localctx, 142, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 851;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 834;
				Match(T__70);
				State = 835;
				typeName(0);
				}
				break;
			case 2:
				{
				State = 836;
				Match(T__22);
				State = 837;
				expression(0);
				State = 838;
				Match(T__23);
				}
				break;
			case 3:
				{
				State = 840;
				_la = TokenStream.LA(1);
				if ( !(_la==T__68 || _la==T__69) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 841;
				expression(19);
				}
				break;
			case 4:
				{
				State = 842;
				_la = TokenStream.LA(1);
				if ( !(_la==T__31 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 843;
				expression(18);
				}
				break;
			case 5:
				{
				State = 844;
				Match(T__72);
				State = 845;
				expression(17);
				}
				break;
			case 6:
				{
				State = 846;
				Match(T__73);
				State = 847;
				expression(16);
				}
				break;
			case 7:
				{
				State = 848;
				Match(T__5);
				State = 849;
				expression(15);
				}
				break;
			case 8:
				{
				State = 850;
				primaryExpression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 927;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 925;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 853;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 854;
						Match(T__74);
						State = 855;
						expression(14);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 856;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 857;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 51539607560L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 858;
						expression(14);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 859;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 860;
						_la = TokenStream.LA(1);
						if ( !(_la==T__31 || _la==T__32) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 861;
						expression(13);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 862;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 863;
						_la = TokenStream.LA(1);
						if ( !(_la==T__75 || _la==T__76) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 864;
						expression(12);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 865;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 866;
						Match(T__30);
						State = 867;
						expression(11);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 868;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 869;
						Match(T__4);
						State = 870;
						expression(10);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 871;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 872;
						Match(T__29);
						State = 873;
						expression(9);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 874;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 875;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 876;
						expression(8);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 877;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 878;
						_la = TokenStream.LA(1);
						if ( !(_la==T__35 || _la==T__36) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 879;
						expression(7);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 880;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 881;
						Match(T__77);
						State = 882;
						expression(6);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 883;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 884;
						Match(T__3);
						State = 885;
						expression(5);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 886;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 887;
						Match(T__78);
						State = 888;
						expression(0);
						State = 889;
						Match(T__71);
						State = 890;
						expression(3);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 892;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 893;
						_la = TokenStream.LA(1);
						if ( !(_la==T__10 || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 1023L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 894;
						expression(3);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 895;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 896;
						_la = TokenStream.LA(1);
						if ( !(_la==T__68 || _la==T__69) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 897;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 898;
						Match(T__43);
						State = 899;
						expression(0);
						State = 900;
						Match(T__44);
						}
						break;
					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 902;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 903;
						Match(T__43);
						State = 905;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & -288154217586491135L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 8540021574059687963L) != 0)) {
							{
							State = 904;
							expression(0);
							}
						}

						State = 907;
						Match(T__71);
						State = 909;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & -288154217586491135L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 8540021574059687963L) != 0)) {
							{
							State = 908;
							expression(0);
							}
						}

						State = 911;
						Match(T__44);
						}
						break;
					case 17:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 912;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 913;
						Match(T__46);
						State = 914;
						identifier();
						}
						break;
					case 18:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 915;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 916;
						Match(T__14);
						State = 917;
						nameValueList();
						State = 918;
						Match(T__16);
						}
						break;
					case 19:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 920;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 921;
						Match(T__22);
						State = 922;
						functionCallArguments();
						State = 923;
						Match(T__23);
						}
						break;
					}
					} 
				}
				State = 929;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,96,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(SolidityParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexLiteralContext hexLiteral() {
			return GetRuleContext<HexLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeKeyword() { return GetToken(SolidityParser.TypeKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 144, RULE_primaryExpression);
		try {
			State = 939;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 930;
				Match(BooleanLiteral);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 931;
				numberLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 932;
				hexLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 933;
				stringLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 934;
				identifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 935;
				Match(TypeKeyword);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 936;
				Match(PayableKeyword);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 937;
				tupleExpression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 938;
				typeName(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 146, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941;
			expression(0);
			State = 946;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 942;
				Match(T__15);
				State = 943;
				expression(0);
				}
				}
				State = 948;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameValueContext[] nameValue() {
			return GetRuleContexts<NameValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameValueContext nameValue(int i) {
			return GetRuleContext<NameValueContext>(i);
		}
		public NameValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameValueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNameValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNameValueList(this);
		}
	}

	[RuleVersion(0)]
	public NameValueListContext nameValueList() {
		NameValueListContext _localctx = new NameValueListContext(Context, State);
		EnterRule(_localctx, 148, RULE_nameValueList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 949;
			nameValue();
			State = 954;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 950;
					Match(T__15);
					State = 951;
					nameValue();
					}
					} 
				}
				State = 956;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			}
			State = 958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 957;
				Match(T__15);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NameValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNameValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNameValue(this);
		}
	}

	[RuleVersion(0)]
	public NameValueContext nameValue() {
		NameValueContext _localctx = new NameValueContext(Context, State);
		EnterRule(_localctx, 150, RULE_nameValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 960;
			identifier();
			State = 961;
			Match(T__71);
			State = 962;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameValueListContext nameValueList() {
			return GetRuleContext<NameValueListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionCallArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionCallArguments(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallArgumentsContext functionCallArguments() {
		FunctionCallArgumentsContext _localctx = new FunctionCallArgumentsContext(Context, State);
		EnterRule(_localctx, 152, RULE_functionCallArguments);
		int _la;
		try {
			State = 972;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 964;
				Match(T__14);
				State = 966;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 1126179079731201L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942145L) != 0)) {
					{
					State = 965;
					nameValueList();
					}
				}

				State = 968;
				Match(T__16);
				}
				break;
			case T__5:
			case T__13:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__31:
			case T__32:
			case T__39:
			case T__43:
			case T__45:
			case T__47:
			case T__51:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__72:
			case T__73:
			case T__96:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteralFragment:
			case LeaveKeyword:
			case PayableKeyword:
			case TypeKeyword:
			case GlobalKeyword:
			case ConstructorKeyword:
			case ReceiveKeyword:
			case Identifier:
			case StringLiteralFragment:
				EnterOuterAlt(_localctx, 2);
				{
				State = 970;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & -288154217586491135L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 8540021574059687963L) != 0)) {
					{
					State = 969;
					expressionList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgumentsContext functionCallArguments() {
			return GetRuleContext<FunctionCallArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 154, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 974;
			expression(0);
			State = 975;
			Match(T__22);
			State = 976;
			functionCallArguments();
			State = 977;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyItemContext[] assemblyItem() {
			return GetRuleContexts<AssemblyItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyItemContext assemblyItem(int i) {
			return GetRuleContext<AssemblyItemContext>(i);
		}
		public AssemblyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyBlock(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyBlockContext assemblyBlock() {
		AssemblyBlockContext _localctx = new AssemblyBlockContext(Context, State);
		EnterRule(_localctx, 156, RULE_assemblyBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979;
			Match(T__14);
			State = 983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 19281864900524547L) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & 8110075134089L) != 0)) {
				{
				{
				State = 980;
				assemblyItem();
				}
				}
				State = 985;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 986;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyLocalDefinitionContext assemblyLocalDefinition() {
			return GetRuleContext<AssemblyLocalDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyAssignmentContext assemblyAssignment() {
			return GetRuleContext<AssemblyAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyStackAssignmentContext assemblyStackAssignment() {
			return GetRuleContext<AssemblyStackAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelDefinitionContext labelDefinition() {
			return GetRuleContext<LabelDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblySwitchContext assemblySwitch() {
			return GetRuleContext<AssemblySwitchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyFunctionDefinitionContext assemblyFunctionDefinition() {
			return GetRuleContext<AssemblyFunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyForContext assemblyFor() {
			return GetRuleContext<AssemblyForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIfContext assemblyIf() {
			return GetRuleContext<AssemblyIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BreakKeyword() { return GetToken(SolidityParser.BreakKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ContinueKeyword() { return GetToken(SolidityParser.ContinueKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeaveKeyword() { return GetToken(SolidityParser.LeaveKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexLiteralContext hexLiteral() {
			return GetRuleContext<HexLiteralContext>(0);
		}
		public AssemblyItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyItem(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyItemContext assemblyItem() {
		AssemblyItemContext _localctx = new AssemblyItemContext(Context, State);
		EnterRule(_localctx, 158, RULE_assemblyItem);
		try {
			State = 1005;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 988;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 989;
				assemblyBlock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 990;
				assemblyExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 991;
				assemblyLocalDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 992;
				assemblyAssignment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 993;
				assemblyStackAssignment();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 994;
				labelDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 995;
				assemblySwitch();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 996;
				assemblyFunctionDefinition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 997;
				assemblyFor();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 998;
				assemblyIf();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 999;
				Match(BreakKeyword);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1000;
				Match(ContinueKeyword);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1001;
				Match(LeaveKeyword);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1002;
				numberLiteral();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1003;
				stringLiteral();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1004;
				hexLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCallContext assemblyCall() {
			return GetRuleContext<AssemblyCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyLiteralContext assemblyLiteral() {
			return GetRuleContext<AssemblyLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyMemberContext assemblyMember() {
			return GetRuleContext<AssemblyMemberContext>(0);
		}
		public AssemblyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyExpressionContext assemblyExpression() {
		AssemblyExpressionContext _localctx = new AssemblyExpressionContext(Context, State);
		EnterRule(_localctx, 160, RULE_assemblyExpression);
		try {
			State = 1010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1007;
				assemblyCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1008;
				assemblyLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1009;
				assemblyMember();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public AssemblyMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyMember(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyMemberContext assemblyMember() {
		AssemblyMemberContext _localctx = new AssemblyMemberContext(Context, State);
		EnterRule(_localctx, 162, RULE_assemblyMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1012;
			identifier();
			State = 1013;
			Match(T__46);
			State = 1014;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext[] assemblyExpression() {
			return GetRuleContexts<AssemblyExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression(int i) {
			return GetRuleContext<AssemblyExpressionContext>(i);
		}
		public AssemblyCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyCall(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCallContext assemblyCall() {
		AssemblyCallContext _localctx = new AssemblyCallContext(Context, State);
		EnterRule(_localctx, 164, RULE_assemblyCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1020;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				{
				State = 1016;
				Match(T__60);
				}
				break;
			case 2:
				{
				State = 1017;
				Match(T__45);
				}
				break;
			case 3:
				{
				State = 1018;
				Match(T__67);
				}
				break;
			case 4:
				{
				State = 1019;
				identifier();
				}
				break;
			}
			State = 1034;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				{
				State = 1022;
				Match(T__22);
				State = 1024;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 19281315077568513L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 63359683457L) != 0)) {
					{
					State = 1023;
					assemblyExpression();
					}
				}

				State = 1030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 1026;
					Match(T__15);
					State = 1027;
					assemblyExpression();
					}
					}
					State = 1032;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1033;
				Match(T__23);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyLocalDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierOrListContext assemblyIdentifierOrList() {
			return GetRuleContext<AssemblyIdentifierOrListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyLocalDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyLocalDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyLocalDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyLocalDefinition(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyLocalDefinitionContext assemblyLocalDefinition() {
		AssemblyLocalDefinitionContext _localctx = new AssemblyLocalDefinitionContext(Context, State);
		EnterRule(_localctx, 166, RULE_assemblyLocalDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036;
			Match(T__89);
			State = 1037;
			assemblyIdentifierOrList();
			State = 1040;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__90) {
				{
				State = 1038;
				Match(T__90);
				State = 1039;
				assemblyExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierOrListContext assemblyIdentifierOrList() {
			return GetRuleContext<AssemblyIdentifierOrListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyAssignmentContext assemblyAssignment() {
		AssemblyAssignmentContext _localctx = new AssemblyAssignmentContext(Context, State);
		EnterRule(_localctx, 168, RULE_assemblyAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1042;
			assemblyIdentifierOrList();
			State = 1043;
			Match(T__90);
			State = 1044;
			assemblyExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIdentifierOrListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyMemberContext assemblyMember() {
			return GetRuleContext<AssemblyMemberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		public AssemblyIdentifierOrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIdentifierOrList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIdentifierOrList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIdentifierOrList(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIdentifierOrListContext assemblyIdentifierOrList() {
		AssemblyIdentifierOrListContext _localctx = new AssemblyIdentifierOrListContext(Context, State);
		EnterRule(_localctx, 170, RULE_assemblyIdentifierOrList);
		try {
			State = 1053;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1046;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1047;
				assemblyMember();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1048;
				assemblyIdentifierList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1049;
				Match(T__22);
				State = 1050;
				assemblyIdentifierList();
				State = 1051;
				Match(T__23);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public AssemblyIdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIdentifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIdentifierList(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIdentifierListContext assemblyIdentifierList() {
		AssemblyIdentifierListContext _localctx = new AssemblyIdentifierListContext(Context, State);
		EnterRule(_localctx, 172, RULE_assemblyIdentifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1055;
			identifier();
			State = 1060;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__15) {
				{
				{
				State = 1056;
				Match(T__15);
				State = 1057;
				identifier();
				}
				}
				State = 1062;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyStackAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyStackAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyStackAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyStackAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyStackAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyStackAssignmentContext assemblyStackAssignment() {
		AssemblyStackAssignmentContext _localctx = new AssemblyStackAssignmentContext(Context, State);
		EnterRule(_localctx, 174, RULE_assemblyStackAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063;
			assemblyExpression();
			State = 1064;
			Match(T__91);
			State = 1065;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LabelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterLabelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitLabelDefinition(this);
		}
	}

	[RuleVersion(0)]
	public LabelDefinitionContext labelDefinition() {
		LabelDefinitionContext _localctx = new LabelDefinitionContext(Context, State);
		EnterRule(_localctx, 176, RULE_labelDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067;
			identifier();
			State = 1068;
			Match(T__71);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblySwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCaseContext[] assemblyCase() {
			return GetRuleContexts<AssemblyCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCaseContext assemblyCase(int i) {
			return GetRuleContext<AssemblyCaseContext>(i);
		}
		public AssemblySwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblySwitch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblySwitch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblySwitch(this);
		}
	}

	[RuleVersion(0)]
	public AssemblySwitchContext assemblySwitch() {
		AssemblySwitchContext _localctx = new AssemblySwitchContext(Context, State);
		EnterRule(_localctx, 178, RULE_assemblySwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			Match(T__92);
			State = 1071;
			assemblyExpression();
			State = 1075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__93 || _la==T__94) {
				{
				{
				State = 1072;
				assemblyCase();
				}
				}
				State = 1077;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyLiteralContext assemblyLiteral() {
			return GetRuleContext<AssemblyLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public AssemblyCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyCase(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCaseContext assemblyCase() {
		AssemblyCaseContext _localctx = new AssemblyCaseContext(Context, State);
		EnterRule(_localctx, 180, RULE_assemblyCase);
		try {
			State = 1084;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__93:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1078;
				Match(T__93);
				State = 1079;
				assemblyLiteral();
				State = 1080;
				assemblyBlock();
				}
				break;
			case T__94:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1082;
				Match(T__94);
				State = 1083;
				assemblyBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyFunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyFunctionReturnsContext assemblyFunctionReturns() {
			return GetRuleContext<AssemblyFunctionReturnsContext>(0);
		}
		public AssemblyFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFunctionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyFunctionDefinitionContext assemblyFunctionDefinition() {
		AssemblyFunctionDefinitionContext _localctx = new AssemblyFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 182, RULE_assemblyFunctionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086;
			Match(T__39);
			State = 1087;
			identifier();
			State = 1088;
			Match(T__22);
			State = 1090;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 1126179079731201L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942145L) != 0)) {
				{
				State = 1089;
				assemblyIdentifierList();
				}
			}

			State = 1092;
			Match(T__23);
			State = 1094;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__95) {
				{
				State = 1093;
				assemblyFunctionReturns();
				}
			}

			State = 1096;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyFunctionReturnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		public AssemblyFunctionReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFunctionReturns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFunctionReturns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFunctionReturns(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyFunctionReturnsContext assemblyFunctionReturns() {
		AssemblyFunctionReturnsContext _localctx = new AssemblyFunctionReturnsContext(Context, State);
		EnterRule(_localctx, 184, RULE_assemblyFunctionReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1098;
			Match(T__95);
			State = 1099;
			assemblyIdentifierList();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext[] assemblyExpression() {
			return GetRuleContexts<AssemblyExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression(int i) {
			return GetRuleContext<AssemblyExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext[] assemblyBlock() {
			return GetRuleContexts<AssemblyBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock(int i) {
			return GetRuleContext<AssemblyBlockContext>(i);
		}
		public AssemblyForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFor(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyForContext assemblyFor() {
		AssemblyForContext _localctx = new AssemblyForContext(Context, State);
		EnterRule(_localctx, 186, RULE_assemblyFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1101;
			Match(T__28);
			State = 1104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				{
				State = 1102;
				assemblyBlock();
				}
				break;
			case T__13:
			case T__24:
			case T__25:
			case T__26:
			case T__45:
			case T__51:
			case T__60:
			case T__63:
			case T__67:
			case T__96:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteralFragment:
			case LeaveKeyword:
			case PayableKeyword:
			case GlobalKeyword:
			case ConstructorKeyword:
			case ReceiveKeyword:
			case Identifier:
			case StringLiteralFragment:
				{
				State = 1103;
				assemblyExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1106;
			assemblyExpression();
			State = 1109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				{
				State = 1107;
				assemblyBlock();
				}
				break;
			case T__13:
			case T__24:
			case T__25:
			case T__26:
			case T__45:
			case T__51:
			case T__60:
			case T__63:
			case T__67:
			case T__96:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteralFragment:
			case LeaveKeyword:
			case PayableKeyword:
			case GlobalKeyword:
			case ConstructorKeyword:
			case ReceiveKeyword:
			case Identifier:
			case StringLiteralFragment:
				{
				State = 1108;
				assemblyExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1111;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public AssemblyIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIf(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIfContext assemblyIf() {
		AssemblyIfContext _localctx = new AssemblyIfContext(Context, State);
		EnterRule(_localctx, 188, RULE_assemblyIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113;
			Match(T__52);
			State = 1114;
			assemblyExpression();
			State = 1115;
			assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalNumber() { return GetToken(SolidityParser.DecimalNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(SolidityParser.HexNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexLiteralContext hexLiteral() {
			return GetRuleContext<HexLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(SolidityParser.BooleanLiteral, 0); }
		public AssemblyLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyLiteral(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyLiteralContext assemblyLiteral() {
		AssemblyLiteralContext _localctx = new AssemblyLiteralContext(Context, State);
		EnterRule(_localctx, 190, RULE_assemblyLiteral);
		try {
			State = 1122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringLiteralFragment:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1117;
				stringLiteral();
				}
				break;
			case DecimalNumber:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1118;
				Match(DecimalNumber);
				}
				break;
			case HexNumber:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1119;
				Match(HexNumber);
				}
				break;
			case HexLiteralFragment:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1120;
				hexLiteral();
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1121;
				Match(BooleanLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TupleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
	}

	[RuleVersion(0)]
	public TupleExpressionContext tupleExpression() {
		TupleExpressionContext _localctx = new TupleExpressionContext(Context, State);
		EnterRule(_localctx, 192, RULE_tupleExpression);
		int _la;
		try {
			State = 1150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1124;
				Match(T__22);
				{
				State = 1126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & -288154217586491135L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 8540021574059687963L) != 0)) {
					{
					State = 1125;
					expression(0);
					}
				}

				State = 1134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 1128;
					Match(T__15);
					State = 1130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & -288154217586491135L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 8540021574059687963L) != 0)) {
						{
						State = 1129;
						expression(0);
						}
					}

					}
					}
					State = 1136;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 1137;
				Match(T__23);
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1138;
				Match(T__43);
				State = 1147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & -288154217586491135L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 8540021574059687963L) != 0)) {
					{
					State = 1139;
					expression(0);
					State = 1144;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__15) {
						{
						{
						State = 1140;
						Match(T__15);
						State = 1141;
						expression(0);
						}
						}
						State = 1146;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1149;
				Match(T__44);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecimalNumber() { return GetToken(SolidityParser.DecimalNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexNumber() { return GetToken(SolidityParser.HexNumber, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberUnit() { return GetToken(SolidityParser.NumberUnit, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 194, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1152;
			_la = TokenStream.LA(1);
			if ( !(_la==DecimalNumber || _la==HexNumber) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				{
				State = 1153;
				Match(NumberUnit);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReceiveKeyword() { return GetToken(SolidityParser.ReceiveKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GlobalKeyword() { return GetToken(SolidityParser.GlobalKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConstructorKeyword() { return GetToken(SolidityParser.ConstructorKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeaveKeyword() { return GetToken(SolidityParser.LeaveKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SolidityParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 196, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1156;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 1126179079731201L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 28999942145L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HexLiteralFragment() { return GetTokens(SolidityParser.HexLiteralFragment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexLiteralFragment(int i) {
			return GetToken(SolidityParser.HexLiteralFragment, i);
		}
		public HexLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterHexLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitHexLiteral(this);
		}
	}

	[RuleVersion(0)]
	public HexLiteralContext hexLiteral() {
		HexLiteralContext _localctx = new HexLiteralContext(Context, State);
		EnterRule(_localctx, 198, RULE_hexLiteral);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1159;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1158;
					Match(HexLiteralFragment);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1161;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverrideSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext[] userDefinedTypeName() {
			return GetRuleContexts<UserDefinedTypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedTypeNameContext userDefinedTypeName(int i) {
			return GetRuleContext<UserDefinedTypeNameContext>(i);
		}
		public OverrideSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overrideSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterOverrideSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitOverrideSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public OverrideSpecifierContext overrideSpecifier() {
		OverrideSpecifierContext _localctx = new OverrideSpecifierContext(Context, State);
		EnterRule(_localctx, 200, RULE_overrideSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1163;
			Match(T__97);
			State = 1175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 1164;
				Match(T__22);
				State = 1165;
				userDefinedTypeName();
				State = 1170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 1166;
					Match(T__15);
					State = 1167;
					userDefinedTypeName();
					}
					}
					State = 1172;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1173;
				Match(T__23);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteralFragment() { return GetTokens(SolidityParser.StringLiteralFragment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteralFragment(int i) {
			return GetToken(SolidityParser.StringLiteralFragment, i);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 202, RULE_stringLiteral);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1178;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1177;
					Match(StringLiteralFragment);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1180;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,131,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 39: return typeName_sempred((TypeNameContext)_localctx, predIndex);
		case 71: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool typeName_sempred(TypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 27);
		case 15: return Precpred(Context, 25);
		case 16: return Precpred(Context, 24);
		case 17: return Precpred(Context, 23);
		case 18: return Precpred(Context, 22);
		case 19: return Precpred(Context, 21);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,136,1183,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,5,0,216,8,0,10,0,12,0,219,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,
		1,2,1,3,1,3,1,3,3,3,233,8,3,1,4,1,4,3,4,237,8,4,1,4,5,4,240,8,4,10,4,12,
		4,243,9,4,1,5,1,5,1,6,3,6,248,8,6,1,6,1,6,3,6,252,8,6,1,6,3,6,255,8,6,
		1,7,1,7,1,7,3,7,260,8,7,1,8,1,8,1,8,1,8,3,8,266,8,8,1,8,1,8,1,8,1,8,1,
		8,3,8,273,8,8,1,8,1,8,3,8,277,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		5,8,288,8,8,10,8,12,8,291,9,8,1,8,1,8,1,8,1,8,1,8,3,8,298,8,8,1,9,1,9,
		1,10,3,10,303,8,10,1,10,1,10,1,10,3,10,308,8,10,1,10,1,10,1,10,1,10,5,
		10,314,8,10,10,10,12,10,317,9,10,3,10,319,8,10,1,10,3,10,322,8,10,1,10,
		1,10,5,10,326,8,10,10,10,12,10,329,9,10,1,10,1,10,1,11,1,11,1,11,3,11,
		336,8,11,1,11,3,11,339,8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,3,13,354,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,5,14,364,8,14,10,14,12,14,367,9,14,1,14,1,14,1,14,3,14,372,8,14,1,
		14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
		17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,3,18,399,8,18,1,18,
		3,18,402,8,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,5,19,411,8,19,10,19,12,
		19,414,9,19,1,19,1,19,3,19,418,8,19,1,20,1,20,1,20,3,20,423,8,20,1,21,
		1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,435,8,22,10,22,12,22,
		438,9,22,3,22,440,8,22,1,22,1,22,1,23,1,23,1,23,3,23,447,8,23,1,23,1,23,
		5,23,451,8,23,10,23,12,23,454,9,23,1,23,1,23,3,23,458,8,23,1,24,1,24,1,
		24,3,24,463,8,24,1,24,3,24,466,8,24,1,25,1,25,1,25,1,25,3,25,472,8,25,
		1,25,1,25,3,25,476,8,25,1,26,1,26,3,26,480,8,26,1,26,1,26,1,26,3,26,485,
		8,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,498,8,
		28,10,28,12,28,501,9,28,1,29,1,29,1,29,1,29,3,29,507,8,29,1,29,1,29,1,
		30,1,30,1,31,1,31,1,31,1,31,3,31,517,8,31,1,31,1,31,5,31,521,8,31,10,31,
		12,31,524,9,31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,532,8,32,10,32,12,32,
		535,9,32,3,32,537,8,32,1,32,1,32,1,33,1,33,3,33,543,8,33,1,33,3,33,546,
		8,33,1,34,1,34,1,34,1,34,5,34,552,8,34,10,34,12,34,555,9,34,3,34,557,8,
		34,1,34,1,34,1,35,1,35,3,35,563,8,35,1,35,3,35,566,8,35,1,36,1,36,1,36,
		1,36,5,36,572,8,36,10,36,12,36,575,9,36,3,36,577,8,36,1,36,1,36,1,37,1,
		37,3,37,583,8,37,1,38,1,38,3,38,587,8,38,1,38,1,38,1,39,1,39,1,39,1,39,
		1,39,1,39,1,39,3,39,598,8,39,1,39,1,39,1,39,3,39,603,8,39,1,39,5,39,606,
		8,39,10,39,12,39,609,9,39,1,40,1,40,1,40,5,40,614,8,40,10,40,12,40,617,
		9,40,1,41,1,41,3,41,621,8,41,1,42,1,42,1,42,1,42,3,42,627,8,42,1,42,1,
		42,1,42,3,42,632,8,42,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,
		1,45,5,45,645,8,45,10,45,12,45,648,9,45,1,45,1,45,3,45,652,8,45,1,46,1,
		46,1,47,1,47,1,48,1,48,5,48,660,8,48,10,48,12,48,663,9,48,1,48,1,48,1,
		49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
		49,3,49,682,8,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,
		694,8,51,1,52,1,52,1,52,3,52,699,8,52,1,52,1,52,4,52,703,8,52,11,52,12,
		52,704,1,53,1,53,3,53,709,8,53,1,53,3,53,712,8,53,1,53,1,53,1,54,1,54,
		1,54,1,54,1,54,1,54,1,55,1,55,3,55,724,8,55,1,56,1,56,1,56,1,57,1,57,1,
		57,1,57,3,57,733,8,57,1,57,1,57,3,57,737,8,57,1,57,3,57,740,8,57,1,57,
		1,57,1,57,1,58,1,58,3,58,747,8,58,1,58,1,58,1,58,1,58,3,58,753,8,58,1,
		58,1,58,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,
		61,1,62,1,62,1,62,1,63,1,63,3,63,775,8,63,1,63,1,63,1,64,1,64,1,64,1,65,
		1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
		3,67,797,8,67,1,67,1,67,3,67,801,8,67,1,67,1,67,1,68,3,68,806,8,68,1,68,
		1,68,3,68,810,8,68,5,68,812,8,68,10,68,12,68,815,9,68,1,69,1,69,3,69,819,
		8,69,1,69,5,69,822,8,69,10,69,12,69,825,9,69,1,69,3,69,828,8,69,1,69,1,
		69,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
		71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,852,8,71,1,71,1,71,1,71,1,71,1,71,
		1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
		1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
		1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
		1,71,1,71,1,71,1,71,1,71,3,71,906,8,71,1,71,1,71,3,71,910,8,71,1,71,1,
		71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,926,
		8,71,10,71,12,71,929,9,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
		3,72,940,8,72,1,73,1,73,1,73,5,73,945,8,73,10,73,12,73,948,9,73,1,74,1,
		74,1,74,5,74,953,8,74,10,74,12,74,956,9,74,1,74,3,74,959,8,74,1,75,1,75,
		1,75,1,75,1,76,1,76,3,76,967,8,76,1,76,1,76,3,76,971,8,76,3,76,973,8,76,
		1,77,1,77,1,77,1,77,1,77,1,78,1,78,5,78,982,8,78,10,78,12,78,985,9,78,
		1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
		1,79,1,79,1,79,1,79,1,79,3,79,1006,8,79,1,80,1,80,1,80,3,80,1011,8,80,
		1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,3,82,1021,8,82,1,82,1,82,3,82,
		1025,8,82,1,82,1,82,5,82,1029,8,82,10,82,12,82,1032,9,82,1,82,3,82,1035,
		8,82,1,83,1,83,1,83,1,83,3,83,1041,8,83,1,84,1,84,1,84,1,84,1,85,1,85,
		1,85,1,85,1,85,1,85,1,85,3,85,1054,8,85,1,86,1,86,1,86,5,86,1059,8,86,
		10,86,12,86,1062,9,86,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,89,1,89,1,89,
		5,89,1074,8,89,10,89,12,89,1077,9,89,1,90,1,90,1,90,1,90,1,90,1,90,3,90,
		1085,8,90,1,91,1,91,1,91,1,91,3,91,1091,8,91,1,91,1,91,3,91,1095,8,91,
		1,91,1,91,1,92,1,92,1,92,1,93,1,93,1,93,3,93,1105,8,93,1,93,1,93,1,93,
		3,93,1110,8,93,1,93,1,93,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,
		3,95,1123,8,95,1,96,1,96,3,96,1127,8,96,1,96,1,96,3,96,1131,8,96,5,96,
		1133,8,96,10,96,12,96,1136,9,96,1,96,1,96,1,96,1,96,1,96,5,96,1143,8,96,
		10,96,12,96,1146,9,96,3,96,1148,8,96,1,96,3,96,1151,8,96,1,97,1,97,3,97,
		1155,8,97,1,98,1,98,1,99,4,99,1160,8,99,11,99,12,99,1161,1,100,1,100,1,
		100,1,100,1,100,5,100,1169,8,100,10,100,12,100,1172,9,100,1,100,1,100,
		3,100,1176,8,100,1,101,4,101,1179,8,101,11,101,12,101,1180,1,101,0,2,78,
		142,102,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
		46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
		94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
		132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
		168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
		0,15,1,0,5,11,1,0,19,21,3,0,3,3,5,10,30,37,1,0,50,52,4,0,112,112,120,120,
		124,124,126,126,3,0,46,46,65,68,99,103,1,0,69,70,1,0,32,33,2,0,3,3,34,
		35,1,0,76,77,1,0,7,10,1,0,36,37,2,0,11,11,80,89,1,0,105,106,10,0,14,14,
		25,27,46,46,52,52,64,64,97,97,116,116,120,120,127,128,130,131,1314,0,217,
		1,0,0,0,2,222,1,0,0,0,4,227,1,0,0,0,6,232,1,0,0,0,8,234,1,0,0,0,10,244,
		1,0,0,0,12,254,1,0,0,0,14,256,1,0,0,0,16,297,1,0,0,0,18,299,1,0,0,0,20,
		302,1,0,0,0,22,332,1,0,0,0,24,340,1,0,0,0,26,353,1,0,0,0,28,355,1,0,0,
		0,30,375,1,0,0,0,32,382,1,0,0,0,34,387,1,0,0,0,36,393,1,0,0,0,38,417,1,
		0,0,0,40,419,1,0,0,0,42,424,1,0,0,0,44,426,1,0,0,0,46,443,1,0,0,0,48,459,
		1,0,0,0,50,467,1,0,0,0,52,484,1,0,0,0,54,486,1,0,0,0,56,499,1,0,0,0,58,
		502,1,0,0,0,60,510,1,0,0,0,62,512,1,0,0,0,64,527,1,0,0,0,66,540,1,0,0,
		0,68,547,1,0,0,0,70,560,1,0,0,0,72,567,1,0,0,0,74,580,1,0,0,0,76,584,1,
		0,0,0,78,597,1,0,0,0,80,610,1,0,0,0,82,620,1,0,0,0,84,622,1,0,0,0,86,635,
		1,0,0,0,88,637,1,0,0,0,90,639,1,0,0,0,92,653,1,0,0,0,94,655,1,0,0,0,96,
		657,1,0,0,0,98,681,1,0,0,0,100,683,1,0,0,0,102,686,1,0,0,0,104,695,1,0,
		0,0,106,706,1,0,0,0,108,715,1,0,0,0,110,723,1,0,0,0,112,725,1,0,0,0,114,
		728,1,0,0,0,116,744,1,0,0,0,118,756,1,0,0,0,120,758,1,0,0,0,122,766,1,
		0,0,0,124,769,1,0,0,0,126,772,1,0,0,0,128,778,1,0,0,0,130,781,1,0,0,0,
		132,785,1,0,0,0,134,796,1,0,0,0,136,805,1,0,0,0,138,816,1,0,0,0,140,831,
		1,0,0,0,142,851,1,0,0,0,144,939,1,0,0,0,146,941,1,0,0,0,148,949,1,0,0,
		0,150,960,1,0,0,0,152,972,1,0,0,0,154,974,1,0,0,0,156,979,1,0,0,0,158,
		1005,1,0,0,0,160,1010,1,0,0,0,162,1012,1,0,0,0,164,1020,1,0,0,0,166,1036,
		1,0,0,0,168,1042,1,0,0,0,170,1053,1,0,0,0,172,1055,1,0,0,0,174,1063,1,
		0,0,0,176,1067,1,0,0,0,178,1070,1,0,0,0,180,1084,1,0,0,0,182,1086,1,0,
		0,0,184,1098,1,0,0,0,186,1101,1,0,0,0,188,1113,1,0,0,0,190,1122,1,0,0,
		0,192,1150,1,0,0,0,194,1152,1,0,0,0,196,1156,1,0,0,0,198,1159,1,0,0,0,
		200,1163,1,0,0,0,202,1178,1,0,0,0,204,216,3,2,1,0,205,216,3,16,8,0,206,
		216,3,20,10,0,207,216,3,62,31,0,208,216,3,58,29,0,209,216,3,44,22,0,210,
		216,3,50,25,0,211,216,3,30,15,0,212,216,3,32,16,0,213,216,3,34,17,0,214,
		216,3,36,18,0,215,204,1,0,0,0,215,205,1,0,0,0,215,206,1,0,0,0,215,207,
		1,0,0,0,215,208,1,0,0,0,215,209,1,0,0,0,215,210,1,0,0,0,215,211,1,0,0,
		0,215,212,1,0,0,0,215,213,1,0,0,0,215,214,1,0,0,0,216,219,1,0,0,0,217,
		215,1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,217,1,0,0,0,220,221,5,
		0,0,1,221,1,1,0,0,0,222,223,5,1,0,0,223,224,3,4,2,0,224,225,3,6,3,0,225,
		226,5,2,0,0,226,3,1,0,0,0,227,228,3,196,98,0,228,5,1,0,0,0,229,233,5,3,
		0,0,230,233,3,8,4,0,231,233,3,142,71,0,232,229,1,0,0,0,232,230,1,0,0,0,
		232,231,1,0,0,0,233,7,1,0,0,0,234,241,3,12,6,0,235,237,5,4,0,0,236,235,
		1,0,0,0,236,237,1,0,0,0,237,238,1,0,0,0,238,240,3,12,6,0,239,236,1,0,0,
		0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,9,1,0,0,0,243,241,
		1,0,0,0,244,245,7,0,0,0,245,11,1,0,0,0,246,248,3,10,5,0,247,246,1,0,0,
		0,247,248,1,0,0,0,248,249,1,0,0,0,249,255,5,133,0,0,250,252,3,10,5,0,251,
		250,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,255,5,105,0,0,254,247,
		1,0,0,0,254,251,1,0,0,0,255,13,1,0,0,0,256,259,3,196,98,0,257,258,5,12,
		0,0,258,260,3,196,98,0,259,257,1,0,0,0,259,260,1,0,0,0,260,15,1,0,0,0,
		261,262,5,13,0,0,262,265,3,18,9,0,263,264,5,12,0,0,264,266,3,196,98,0,
		265,263,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,5,2,0,0,268,298,
		1,0,0,0,269,272,5,13,0,0,270,273,5,3,0,0,271,273,3,196,98,0,272,270,1,
		0,0,0,272,271,1,0,0,0,273,276,1,0,0,0,274,275,5,12,0,0,275,277,3,196,98,
		0,276,274,1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,279,5,14,0,0,279,
		280,3,18,9,0,280,281,5,2,0,0,281,298,1,0,0,0,282,283,5,13,0,0,283,284,
		5,15,0,0,284,289,3,14,7,0,285,286,5,16,0,0,286,288,3,14,7,0,287,285,1,
		0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,
		291,289,1,0,0,0,292,293,5,17,0,0,293,294,5,14,0,0,294,295,3,18,9,0,295,
		296,5,2,0,0,296,298,1,0,0,0,297,261,1,0,0,0,297,269,1,0,0,0,297,282,1,
		0,0,0,298,17,1,0,0,0,299,300,5,132,0,0,300,19,1,0,0,0,301,303,5,18,0,0,
		302,301,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,305,7,1,0,0,305,307,
		3,196,98,0,306,308,3,24,12,0,307,306,1,0,0,0,307,308,1,0,0,0,308,318,1,
		0,0,0,309,310,5,22,0,0,310,315,3,22,11,0,311,312,5,16,0,0,312,314,3,22,
		11,0,313,311,1,0,0,0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,
		319,1,0,0,0,317,315,1,0,0,0,318,309,1,0,0,0,318,319,1,0,0,0,319,321,1,
		0,0,0,320,322,3,24,12,0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,
		0,323,327,5,15,0,0,324,326,3,26,13,0,325,324,1,0,0,0,326,329,1,0,0,0,327,
		325,1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,327,1,0,0,0,330,331,5,
		17,0,0,331,21,1,0,0,0,332,338,3,80,40,0,333,335,5,23,0,0,334,336,3,146,
		73,0,335,334,1,0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,339,5,24,0,0,
		338,333,1,0,0,0,338,339,1,0,0,0,339,23,1,0,0,0,340,341,5,25,0,0,341,342,
		5,26,0,0,342,343,3,142,71,0,343,25,1,0,0,0,344,354,3,28,14,0,345,354,3,
		36,18,0,346,354,3,44,22,0,347,354,3,46,23,0,348,354,3,50,25,0,349,354,
		3,58,29,0,350,354,3,62,31,0,351,354,3,32,16,0,352,354,3,34,17,0,353,344,
		1,0,0,0,353,345,1,0,0,0,353,346,1,0,0,0,353,347,1,0,0,0,353,348,1,0,0,
		0,353,349,1,0,0,0,353,350,1,0,0,0,353,351,1,0,0,0,353,352,1,0,0,0,354,
		27,1,0,0,0,355,365,3,78,39,0,356,364,5,122,0,0,357,364,5,119,0,0,358,364,
		5,121,0,0,359,364,5,112,0,0,360,364,5,113,0,0,361,364,5,114,0,0,362,364,
		3,200,100,0,363,356,1,0,0,0,363,357,1,0,0,0,363,358,1,0,0,0,363,359,1,
		0,0,0,363,360,1,0,0,0,363,361,1,0,0,0,363,362,1,0,0,0,364,367,1,0,0,0,
		365,363,1,0,0,0,365,366,1,0,0,0,366,368,1,0,0,0,367,365,1,0,0,0,368,371,
		3,196,98,0,369,370,5,11,0,0,370,372,3,142,71,0,371,369,1,0,0,0,371,372,
		1,0,0,0,372,373,1,0,0,0,373,374,5,2,0,0,374,29,1,0,0,0,375,376,3,78,39,
		0,376,377,5,112,0,0,377,378,3,196,98,0,378,379,5,11,0,0,379,380,3,142,
		71,0,380,381,5,2,0,0,381,31,1,0,0,0,382,383,5,27,0,0,383,384,3,196,98,
		0,384,385,3,64,32,0,385,386,5,2,0,0,386,33,1,0,0,0,387,388,5,125,0,0,388,
		389,3,196,98,0,389,390,5,22,0,0,390,391,3,140,70,0,391,392,5,2,0,0,392,
		35,1,0,0,0,393,394,5,28,0,0,394,395,3,38,19,0,395,398,5,29,0,0,396,399,
		5,3,0,0,397,399,3,78,39,0,398,396,1,0,0,0,398,397,1,0,0,0,399,401,1,0,
		0,0,400,402,5,127,0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,
		403,404,5,2,0,0,404,37,1,0,0,0,405,418,3,80,40,0,406,407,5,15,0,0,407,
		412,3,40,20,0,408,409,5,16,0,0,409,411,3,40,20,0,410,408,1,0,0,0,411,414,
		1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,413,415,1,0,0,0,414,412,1,0,0,
		0,415,416,5,17,0,0,416,418,1,0,0,0,417,405,1,0,0,0,417,406,1,0,0,0,418,
		39,1,0,0,0,419,422,3,80,40,0,420,421,5,12,0,0,421,423,3,42,21,0,422,420,
		1,0,0,0,422,423,1,0,0,0,423,41,1,0,0,0,424,425,7,2,0,0,425,43,1,0,0,0,
		426,427,5,38,0,0,427,428,3,196,98,0,428,439,5,15,0,0,429,430,3,76,38,0,
		430,436,5,2,0,0,431,432,3,76,38,0,432,433,5,2,0,0,433,435,1,0,0,0,434,
		431,1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,440,1,
		0,0,0,438,436,1,0,0,0,439,429,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,
		441,442,5,17,0,0,442,45,1,0,0,0,443,444,5,39,0,0,444,446,3,196,98,0,445,
		447,3,64,32,0,446,445,1,0,0,0,446,447,1,0,0,0,447,452,1,0,0,0,448,451,
		5,123,0,0,449,451,3,200,100,0,450,448,1,0,0,0,450,449,1,0,0,0,451,454,
		1,0,0,0,452,450,1,0,0,0,452,453,1,0,0,0,453,457,1,0,0,0,454,452,1,0,0,
		0,455,458,5,2,0,0,456,458,3,96,48,0,457,455,1,0,0,0,457,456,1,0,0,0,458,
		47,1,0,0,0,459,465,3,196,98,0,460,462,5,23,0,0,461,463,3,146,73,0,462,
		461,1,0,0,0,462,463,1,0,0,0,463,464,1,0,0,0,464,466,5,24,0,0,465,460,1,
		0,0,0,465,466,1,0,0,0,466,49,1,0,0,0,467,468,3,52,26,0,468,469,3,64,32,
		0,469,471,3,56,28,0,470,472,3,54,27,0,471,470,1,0,0,0,471,472,1,0,0,0,
		472,475,1,0,0,0,473,476,5,2,0,0,474,476,3,96,48,0,475,473,1,0,0,0,475,
		474,1,0,0,0,476,51,1,0,0,0,477,479,5,40,0,0,478,480,3,196,98,0,479,478,
		1,0,0,0,479,480,1,0,0,0,480,485,1,0,0,0,481,485,5,128,0,0,482,485,5,129,
		0,0,483,485,5,130,0,0,484,477,1,0,0,0,484,481,1,0,0,0,484,482,1,0,0,0,
		484,483,1,0,0,0,485,53,1,0,0,0,486,487,5,41,0,0,487,488,3,64,32,0,488,
		55,1,0,0,0,489,498,5,117,0,0,490,498,5,122,0,0,491,498,5,119,0,0,492,498,
		5,121,0,0,493,498,5,123,0,0,494,498,3,94,47,0,495,498,3,48,24,0,496,498,
		3,200,100,0,497,489,1,0,0,0,497,490,1,0,0,0,497,491,1,0,0,0,497,492,1,
		0,0,0,497,493,1,0,0,0,497,494,1,0,0,0,497,495,1,0,0,0,497,496,1,0,0,0,
		498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,57,1,0,0,0,501,499,
		1,0,0,0,502,503,5,42,0,0,503,504,3,196,98,0,504,506,3,68,34,0,505,507,
		5,110,0,0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,509,5,2,
		0,0,509,59,1,0,0,0,510,511,3,196,98,0,511,61,1,0,0,0,512,513,5,43,0,0,
		513,514,3,196,98,0,514,516,5,15,0,0,515,517,3,60,30,0,516,515,1,0,0,0,
		516,517,1,0,0,0,517,522,1,0,0,0,518,519,5,16,0,0,519,521,3,60,30,0,520,
		518,1,0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,525,1,
		0,0,0,524,522,1,0,0,0,525,526,5,17,0,0,526,63,1,0,0,0,527,536,5,23,0,0,
		528,533,3,66,33,0,529,530,5,16,0,0,530,532,3,66,33,0,531,529,1,0,0,0,532,
		535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,534,537,1,0,0,0,535,533,1,
		0,0,0,536,528,1,0,0,0,536,537,1,0,0,0,537,538,1,0,0,0,538,539,5,24,0,0,
		539,65,1,0,0,0,540,542,3,78,39,0,541,543,3,92,46,0,542,541,1,0,0,0,542,
		543,1,0,0,0,543,545,1,0,0,0,544,546,3,196,98,0,545,544,1,0,0,0,545,546,
		1,0,0,0,546,67,1,0,0,0,547,556,5,23,0,0,548,553,3,70,35,0,549,550,5,16,
		0,0,550,552,3,70,35,0,551,549,1,0,0,0,552,555,1,0,0,0,553,551,1,0,0,0,
		553,554,1,0,0,0,554,557,1,0,0,0,555,553,1,0,0,0,556,548,1,0,0,0,556,557,
		1,0,0,0,557,558,1,0,0,0,558,559,5,24,0,0,559,69,1,0,0,0,560,562,3,78,39,
		0,561,563,5,118,0,0,562,561,1,0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,564,
		566,3,196,98,0,565,564,1,0,0,0,565,566,1,0,0,0,566,71,1,0,0,0,567,576,
		5,23,0,0,568,573,3,74,37,0,569,570,5,16,0,0,570,572,3,74,37,0,571,569,
		1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,577,1,0,0,
		0,575,573,1,0,0,0,576,568,1,0,0,0,576,577,1,0,0,0,577,578,1,0,0,0,578,
		579,5,24,0,0,579,73,1,0,0,0,580,582,3,78,39,0,581,583,3,92,46,0,582,581,
		1,0,0,0,582,583,1,0,0,0,583,75,1,0,0,0,584,586,3,78,39,0,585,587,3,92,
		46,0,586,585,1,0,0,0,586,587,1,0,0,0,587,588,1,0,0,0,588,589,3,196,98,
		0,589,77,1,0,0,0,590,591,6,39,-1,0,591,598,3,140,70,0,592,598,3,80,40,
		0,593,598,3,84,42,0,594,598,3,90,45,0,595,596,5,46,0,0,596,598,5,120,0,
		0,597,590,1,0,0,0,597,592,1,0,0,0,597,593,1,0,0,0,597,594,1,0,0,0,597,
		595,1,0,0,0,598,607,1,0,0,0,599,600,10,3,0,0,600,602,5,44,0,0,601,603,
		3,142,71,0,602,601,1,0,0,0,602,603,1,0,0,0,603,604,1,0,0,0,604,606,5,45,
		0,0,605,599,1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,
		79,1,0,0,0,609,607,1,0,0,0,610,615,3,196,98,0,611,612,5,47,0,0,612,614,
		3,196,98,0,613,611,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,615,616,1,0,
		0,0,616,81,1,0,0,0,617,615,1,0,0,0,618,621,3,140,70,0,619,621,3,80,40,
		0,620,618,1,0,0,0,620,619,1,0,0,0,621,83,1,0,0,0,622,623,5,48,0,0,623,
		624,5,23,0,0,624,626,3,82,41,0,625,627,3,86,43,0,626,625,1,0,0,0,626,627,
		1,0,0,0,627,628,1,0,0,0,628,629,5,49,0,0,629,631,3,78,39,0,630,632,3,88,
		44,0,631,630,1,0,0,0,631,632,1,0,0,0,632,633,1,0,0,0,633,634,5,24,0,0,
		634,85,1,0,0,0,635,636,3,196,98,0,636,87,1,0,0,0,637,638,3,196,98,0,638,
		89,1,0,0,0,639,640,5,40,0,0,640,646,3,72,36,0,641,645,5,119,0,0,642,645,
		5,117,0,0,643,645,3,94,47,0,644,641,1,0,0,0,644,642,1,0,0,0,644,643,1,
		0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,651,1,0,0,0,
		648,646,1,0,0,0,649,650,5,41,0,0,650,652,3,72,36,0,651,649,1,0,0,0,651,
		652,1,0,0,0,652,91,1,0,0,0,653,654,7,3,0,0,654,93,1,0,0,0,655,656,7,4,
		0,0,656,95,1,0,0,0,657,661,5,15,0,0,658,660,3,98,49,0,659,658,1,0,0,0,
		660,663,1,0,0,0,661,659,1,0,0,0,661,662,1,0,0,0,662,664,1,0,0,0,663,661,
		1,0,0,0,664,665,5,17,0,0,665,97,1,0,0,0,666,682,3,102,51,0,667,682,3,104,
		52,0,668,682,3,108,54,0,669,682,3,114,57,0,670,682,3,96,48,0,671,682,3,
		116,58,0,672,682,3,120,60,0,673,682,3,122,61,0,674,682,3,124,62,0,675,
		682,3,126,63,0,676,682,3,128,64,0,677,682,3,130,65,0,678,682,3,110,55,
		0,679,682,3,112,56,0,680,682,3,132,66,0,681,666,1,0,0,0,681,667,1,0,0,
		0,681,668,1,0,0,0,681,669,1,0,0,0,681,670,1,0,0,0,681,671,1,0,0,0,681,
		672,1,0,0,0,681,673,1,0,0,0,681,674,1,0,0,0,681,675,1,0,0,0,681,676,1,
		0,0,0,681,677,1,0,0,0,681,678,1,0,0,0,681,679,1,0,0,0,681,680,1,0,0,0,
		682,99,1,0,0,0,683,684,3,142,71,0,684,685,5,2,0,0,685,101,1,0,0,0,686,
		687,5,53,0,0,687,688,5,23,0,0,688,689,3,142,71,0,689,690,5,24,0,0,690,
		693,3,98,49,0,691,692,5,54,0,0,692,694,3,98,49,0,693,691,1,0,0,0,693,694,
		1,0,0,0,694,103,1,0,0,0,695,696,5,55,0,0,696,698,3,142,71,0,697,699,3,
		54,27,0,698,697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,702,3,96,48,
		0,701,703,3,106,53,0,702,701,1,0,0,0,703,704,1,0,0,0,704,702,1,0,0,0,704,
		705,1,0,0,0,705,105,1,0,0,0,706,711,5,56,0,0,707,709,3,196,98,0,708,707,
		1,0,0,0,708,709,1,0,0,0,709,710,1,0,0,0,710,712,3,64,32,0,711,708,1,0,
		0,0,711,712,1,0,0,0,712,713,1,0,0,0,713,714,3,96,48,0,714,107,1,0,0,0,
		715,716,5,57,0,0,716,717,5,23,0,0,717,718,3,142,71,0,718,719,5,24,0,0,
		719,720,3,98,49,0,720,109,1,0,0,0,721,724,3,134,67,0,722,724,3,100,50,
		0,723,721,1,0,0,0,723,722,1,0,0,0,724,111,1,0,0,0,725,726,5,58,0,0,726,
		727,3,96,48,0,727,113,1,0,0,0,728,729,5,29,0,0,729,732,5,23,0,0,730,733,
		3,110,55,0,731,733,5,2,0,0,732,730,1,0,0,0,732,731,1,0,0,0,733,736,1,0,
		0,0,734,737,3,100,50,0,735,737,5,2,0,0,736,734,1,0,0,0,736,735,1,0,0,0,
		737,739,1,0,0,0,738,740,3,142,71,0,739,738,1,0,0,0,739,740,1,0,0,0,740,
		741,1,0,0,0,741,742,5,24,0,0,742,743,3,98,49,0,743,115,1,0,0,0,744,746,
		5,59,0,0,745,747,5,132,0,0,746,745,1,0,0,0,746,747,1,0,0,0,747,752,1,0,
		0,0,748,749,5,23,0,0,749,750,3,118,59,0,750,751,5,24,0,0,751,753,1,0,0,
		0,752,748,1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,755,3,156,78,0,755,
		117,1,0,0,0,756,757,3,202,101,0,757,119,1,0,0,0,758,759,5,60,0,0,759,760,
		3,98,49,0,760,761,5,57,0,0,761,762,5,23,0,0,762,763,3,142,71,0,763,764,
		5,24,0,0,764,765,5,2,0,0,765,121,1,0,0,0,766,767,5,115,0,0,767,768,5,2,
		0,0,768,123,1,0,0,0,769,770,5,111,0,0,770,771,5,2,0,0,771,125,1,0,0,0,
		772,774,5,61,0,0,773,775,3,142,71,0,774,773,1,0,0,0,774,775,1,0,0,0,775,
		776,1,0,0,0,776,777,5,2,0,0,777,127,1,0,0,0,778,779,5,62,0,0,779,780,5,
		2,0,0,780,129,1,0,0,0,781,782,5,63,0,0,782,783,3,154,77,0,783,784,5,2,
		0,0,784,131,1,0,0,0,785,786,5,64,0,0,786,787,3,154,77,0,787,788,5,2,0,
		0,788,133,1,0,0,0,789,790,5,65,0,0,790,797,3,138,69,0,791,797,3,76,38,
		0,792,793,5,23,0,0,793,794,3,136,68,0,794,795,5,24,0,0,795,797,1,0,0,0,
		796,789,1,0,0,0,796,791,1,0,0,0,796,792,1,0,0,0,797,800,1,0,0,0,798,799,
		5,11,0,0,799,801,3,142,71,0,800,798,1,0,0,0,800,801,1,0,0,0,801,802,1,
		0,0,0,802,803,5,2,0,0,803,135,1,0,0,0,804,806,3,76,38,0,805,804,1,0,0,
		0,805,806,1,0,0,0,806,813,1,0,0,0,807,809,5,16,0,0,808,810,3,76,38,0,809,
		808,1,0,0,0,809,810,1,0,0,0,810,812,1,0,0,0,811,807,1,0,0,0,812,815,1,
		0,0,0,813,811,1,0,0,0,813,814,1,0,0,0,814,137,1,0,0,0,815,813,1,0,0,0,
		816,823,5,23,0,0,817,819,3,196,98,0,818,817,1,0,0,0,818,819,1,0,0,0,819,
		820,1,0,0,0,820,822,5,16,0,0,821,818,1,0,0,0,822,825,1,0,0,0,823,821,1,
		0,0,0,823,824,1,0,0,0,824,827,1,0,0,0,825,823,1,0,0,0,826,828,3,196,98,
		0,827,826,1,0,0,0,827,828,1,0,0,0,828,829,1,0,0,0,829,830,5,24,0,0,830,
		139,1,0,0,0,831,832,7,5,0,0,832,141,1,0,0,0,833,834,6,71,-1,0,834,835,
		5,71,0,0,835,852,3,78,39,0,836,837,5,23,0,0,837,838,3,142,71,0,838,839,
		5,24,0,0,839,852,1,0,0,0,840,841,7,6,0,0,841,852,3,142,71,19,842,843,7,
		7,0,0,843,852,3,142,71,18,844,845,5,73,0,0,845,852,3,142,71,17,846,847,
		5,74,0,0,847,852,3,142,71,16,848,849,5,6,0,0,849,852,3,142,71,15,850,852,
		3,144,72,0,851,833,1,0,0,0,851,836,1,0,0,0,851,840,1,0,0,0,851,842,1,0,
		0,0,851,844,1,0,0,0,851,846,1,0,0,0,851,848,1,0,0,0,851,850,1,0,0,0,852,
		927,1,0,0,0,853,854,10,14,0,0,854,855,5,75,0,0,855,926,3,142,71,14,856,
		857,10,13,0,0,857,858,7,8,0,0,858,926,3,142,71,14,859,860,10,12,0,0,860,
		861,7,7,0,0,861,926,3,142,71,13,862,863,10,11,0,0,863,864,7,9,0,0,864,
		926,3,142,71,12,865,866,10,10,0,0,866,867,5,31,0,0,867,926,3,142,71,11,
		868,869,10,9,0,0,869,870,5,5,0,0,870,926,3,142,71,10,871,872,10,8,0,0,
		872,873,5,30,0,0,873,926,3,142,71,9,874,875,10,7,0,0,875,876,7,10,0,0,
		876,926,3,142,71,8,877,878,10,6,0,0,878,879,7,11,0,0,879,926,3,142,71,
		7,880,881,10,5,0,0,881,882,5,78,0,0,882,926,3,142,71,6,883,884,10,4,0,
		0,884,885,5,4,0,0,885,926,3,142,71,5,886,887,10,3,0,0,887,888,5,79,0,0,
		888,889,3,142,71,0,889,890,5,72,0,0,890,891,3,142,71,3,891,926,1,0,0,0,
		892,893,10,2,0,0,893,894,7,12,0,0,894,926,3,142,71,3,895,896,10,27,0,0,
		896,926,7,6,0,0,897,898,10,25,0,0,898,899,5,44,0,0,899,900,3,142,71,0,
		900,901,5,45,0,0,901,926,1,0,0,0,902,903,10,24,0,0,903,905,5,44,0,0,904,
		906,3,142,71,0,905,904,1,0,0,0,905,906,1,0,0,0,906,907,1,0,0,0,907,909,
		5,72,0,0,908,910,3,142,71,0,909,908,1,0,0,0,909,910,1,0,0,0,910,911,1,
		0,0,0,911,926,5,45,0,0,912,913,10,23,0,0,913,914,5,47,0,0,914,926,3,196,
		98,0,915,916,10,22,0,0,916,917,5,15,0,0,917,918,3,148,74,0,918,919,5,17,
		0,0,919,926,1,0,0,0,920,921,10,21,0,0,921,922,5,23,0,0,922,923,3,152,76,
		0,923,924,5,24,0,0,924,926,1,0,0,0,925,853,1,0,0,0,925,856,1,0,0,0,925,
		859,1,0,0,0,925,862,1,0,0,0,925,865,1,0,0,0,925,868,1,0,0,0,925,871,1,
		0,0,0,925,874,1,0,0,0,925,877,1,0,0,0,925,880,1,0,0,0,925,883,1,0,0,0,
		925,886,1,0,0,0,925,892,1,0,0,0,925,895,1,0,0,0,925,897,1,0,0,0,925,902,
		1,0,0,0,925,912,1,0,0,0,925,915,1,0,0,0,925,920,1,0,0,0,926,929,1,0,0,
		0,927,925,1,0,0,0,927,928,1,0,0,0,928,143,1,0,0,0,929,927,1,0,0,0,930,
		940,5,104,0,0,931,940,3,194,97,0,932,940,3,198,99,0,933,940,3,202,101,
		0,934,940,3,196,98,0,935,940,5,125,0,0,936,940,5,120,0,0,937,940,3,192,
		96,0,938,940,3,78,39,0,939,930,1,0,0,0,939,931,1,0,0,0,939,932,1,0,0,0,
		939,933,1,0,0,0,939,934,1,0,0,0,939,935,1,0,0,0,939,936,1,0,0,0,939,937,
		1,0,0,0,939,938,1,0,0,0,940,145,1,0,0,0,941,946,3,142,71,0,942,943,5,16,
		0,0,943,945,3,142,71,0,944,942,1,0,0,0,945,948,1,0,0,0,946,944,1,0,0,0,
		946,947,1,0,0,0,947,147,1,0,0,0,948,946,1,0,0,0,949,954,3,150,75,0,950,
		951,5,16,0,0,951,953,3,150,75,0,952,950,1,0,0,0,953,956,1,0,0,0,954,952,
		1,0,0,0,954,955,1,0,0,0,955,958,1,0,0,0,956,954,1,0,0,0,957,959,5,16,0,
		0,958,957,1,0,0,0,958,959,1,0,0,0,959,149,1,0,0,0,960,961,3,196,98,0,961,
		962,5,72,0,0,962,963,3,142,71,0,963,151,1,0,0,0,964,966,5,15,0,0,965,967,
		3,148,74,0,966,965,1,0,0,0,966,967,1,0,0,0,967,968,1,0,0,0,968,973,5,17,
		0,0,969,971,3,146,73,0,970,969,1,0,0,0,970,971,1,0,0,0,971,973,1,0,0,0,
		972,964,1,0,0,0,972,970,1,0,0,0,973,153,1,0,0,0,974,975,3,142,71,0,975,
		976,5,23,0,0,976,977,3,152,76,0,977,978,5,24,0,0,978,155,1,0,0,0,979,983,
		5,15,0,0,980,982,3,158,79,0,981,980,1,0,0,0,982,985,1,0,0,0,983,981,1,
		0,0,0,983,984,1,0,0,0,984,986,1,0,0,0,985,983,1,0,0,0,986,987,5,17,0,0,
		987,157,1,0,0,0,988,1006,3,196,98,0,989,1006,3,156,78,0,990,1006,3,160,
		80,0,991,1006,3,166,83,0,992,1006,3,168,84,0,993,1006,3,174,87,0,994,1006,
		3,176,88,0,995,1006,3,178,89,0,996,1006,3,182,91,0,997,1006,3,186,93,0,
		998,1006,3,188,94,0,999,1006,5,111,0,0,1000,1006,5,115,0,0,1001,1006,5,
		116,0,0,1002,1006,3,194,97,0,1003,1006,3,202,101,0,1004,1006,3,198,99,
		0,1005,988,1,0,0,0,1005,989,1,0,0,0,1005,990,1,0,0,0,1005,991,1,0,0,0,
		1005,992,1,0,0,0,1005,993,1,0,0,0,1005,994,1,0,0,0,1005,995,1,0,0,0,1005,
		996,1,0,0,0,1005,997,1,0,0,0,1005,998,1,0,0,0,1005,999,1,0,0,0,1005,1000,
		1,0,0,0,1005,1001,1,0,0,0,1005,1002,1,0,0,0,1005,1003,1,0,0,0,1005,1004,
		1,0,0,0,1006,159,1,0,0,0,1007,1011,3,164,82,0,1008,1011,3,190,95,0,1009,
		1011,3,162,81,0,1010,1007,1,0,0,0,1010,1008,1,0,0,0,1010,1009,1,0,0,0,
		1011,161,1,0,0,0,1012,1013,3,196,98,0,1013,1014,5,47,0,0,1014,1015,3,196,
		98,0,1015,163,1,0,0,0,1016,1021,5,61,0,0,1017,1021,5,46,0,0,1018,1021,
		5,68,0,0,1019,1021,3,196,98,0,1020,1016,1,0,0,0,1020,1017,1,0,0,0,1020,
		1018,1,0,0,0,1020,1019,1,0,0,0,1021,1034,1,0,0,0,1022,1024,5,23,0,0,1023,
		1025,3,160,80,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,1030,1,0,0,0,
		1026,1027,5,16,0,0,1027,1029,3,160,80,0,1028,1026,1,0,0,0,1029,1032,1,
		0,0,0,1030,1028,1,0,0,0,1030,1031,1,0,0,0,1031,1033,1,0,0,0,1032,1030,
		1,0,0,0,1033,1035,5,24,0,0,1034,1022,1,0,0,0,1034,1035,1,0,0,0,1035,165,
		1,0,0,0,1036,1037,5,90,0,0,1037,1040,3,170,85,0,1038,1039,5,91,0,0,1039,
		1041,3,160,80,0,1040,1038,1,0,0,0,1040,1041,1,0,0,0,1041,167,1,0,0,0,1042,
		1043,3,170,85,0,1043,1044,5,91,0,0,1044,1045,3,160,80,0,1045,169,1,0,0,
		0,1046,1054,3,196,98,0,1047,1054,3,162,81,0,1048,1054,3,172,86,0,1049,
		1050,5,23,0,0,1050,1051,3,172,86,0,1051,1052,5,24,0,0,1052,1054,1,0,0,
		0,1053,1046,1,0,0,0,1053,1047,1,0,0,0,1053,1048,1,0,0,0,1053,1049,1,0,
		0,0,1054,171,1,0,0,0,1055,1060,3,196,98,0,1056,1057,5,16,0,0,1057,1059,
		3,196,98,0,1058,1056,1,0,0,0,1059,1062,1,0,0,0,1060,1058,1,0,0,0,1060,
		1061,1,0,0,0,1061,173,1,0,0,0,1062,1060,1,0,0,0,1063,1064,3,160,80,0,1064,
		1065,5,92,0,0,1065,1066,3,196,98,0,1066,175,1,0,0,0,1067,1068,3,196,98,
		0,1068,1069,5,72,0,0,1069,177,1,0,0,0,1070,1071,5,93,0,0,1071,1075,3,160,
		80,0,1072,1074,3,180,90,0,1073,1072,1,0,0,0,1074,1077,1,0,0,0,1075,1073,
		1,0,0,0,1075,1076,1,0,0,0,1076,179,1,0,0,0,1077,1075,1,0,0,0,1078,1079,
		5,94,0,0,1079,1080,3,190,95,0,1080,1081,3,156,78,0,1081,1085,1,0,0,0,1082,
		1083,5,95,0,0,1083,1085,3,156,78,0,1084,1078,1,0,0,0,1084,1082,1,0,0,0,
		1085,181,1,0,0,0,1086,1087,5,40,0,0,1087,1088,3,196,98,0,1088,1090,5,23,
		0,0,1089,1091,3,172,86,0,1090,1089,1,0,0,0,1090,1091,1,0,0,0,1091,1092,
		1,0,0,0,1092,1094,5,24,0,0,1093,1095,3,184,92,0,1094,1093,1,0,0,0,1094,
		1095,1,0,0,0,1095,1096,1,0,0,0,1096,1097,3,156,78,0,1097,183,1,0,0,0,1098,
		1099,5,96,0,0,1099,1100,3,172,86,0,1100,185,1,0,0,0,1101,1104,5,29,0,0,
		1102,1105,3,156,78,0,1103,1105,3,160,80,0,1104,1102,1,0,0,0,1104,1103,
		1,0,0,0,1105,1106,1,0,0,0,1106,1109,3,160,80,0,1107,1110,3,156,78,0,1108,
		1110,3,160,80,0,1109,1107,1,0,0,0,1109,1108,1,0,0,0,1110,1111,1,0,0,0,
		1111,1112,3,156,78,0,1112,187,1,0,0,0,1113,1114,5,53,0,0,1114,1115,3,160,
		80,0,1115,1116,3,156,78,0,1116,189,1,0,0,0,1117,1123,3,202,101,0,1118,
		1123,5,105,0,0,1119,1123,5,106,0,0,1120,1123,3,198,99,0,1121,1123,5,104,
		0,0,1122,1117,1,0,0,0,1122,1118,1,0,0,0,1122,1119,1,0,0,0,1122,1120,1,
		0,0,0,1122,1121,1,0,0,0,1123,191,1,0,0,0,1124,1126,5,23,0,0,1125,1127,
		3,142,71,0,1126,1125,1,0,0,0,1126,1127,1,0,0,0,1127,1134,1,0,0,0,1128,
		1130,5,16,0,0,1129,1131,3,142,71,0,1130,1129,1,0,0,0,1130,1131,1,0,0,0,
		1131,1133,1,0,0,0,1132,1128,1,0,0,0,1133,1136,1,0,0,0,1134,1132,1,0,0,
		0,1134,1135,1,0,0,0,1135,1137,1,0,0,0,1136,1134,1,0,0,0,1137,1151,5,24,
		0,0,1138,1147,5,44,0,0,1139,1144,3,142,71,0,1140,1141,5,16,0,0,1141,1143,
		3,142,71,0,1142,1140,1,0,0,0,1143,1146,1,0,0,0,1144,1142,1,0,0,0,1144,
		1145,1,0,0,0,1145,1148,1,0,0,0,1146,1144,1,0,0,0,1147,1139,1,0,0,0,1147,
		1148,1,0,0,0,1148,1149,1,0,0,0,1149,1151,5,45,0,0,1150,1124,1,0,0,0,1150,
		1138,1,0,0,0,1151,193,1,0,0,0,1152,1154,7,13,0,0,1153,1155,5,107,0,0,1154,
		1153,1,0,0,0,1154,1155,1,0,0,0,1155,195,1,0,0,0,1156,1157,7,14,0,0,1157,
		197,1,0,0,0,1158,1160,5,108,0,0,1159,1158,1,0,0,0,1160,1161,1,0,0,0,1161,
		1159,1,0,0,0,1161,1162,1,0,0,0,1162,199,1,0,0,0,1163,1175,5,98,0,0,1164,
		1165,5,23,0,0,1165,1170,3,80,40,0,1166,1167,5,16,0,0,1167,1169,3,80,40,
		0,1168,1166,1,0,0,0,1169,1172,1,0,0,0,1170,1168,1,0,0,0,1170,1171,1,0,
		0,0,1171,1173,1,0,0,0,1172,1170,1,0,0,0,1173,1174,5,24,0,0,1174,1176,1,
		0,0,0,1175,1164,1,0,0,0,1175,1176,1,0,0,0,1176,201,1,0,0,0,1177,1179,5,
		132,0,0,1178,1177,1,0,0,0,1179,1180,1,0,0,0,1180,1178,1,0,0,0,1180,1181,
		1,0,0,0,1181,203,1,0,0,0,132,215,217,232,236,241,247,251,254,259,265,272,
		276,289,297,302,307,315,318,321,327,335,338,353,363,365,371,398,401,412,
		417,422,436,439,446,450,452,457,462,465,471,475,479,484,497,499,506,516,
		522,533,536,542,545,553,556,562,565,573,576,582,586,597,602,607,615,620,
		626,631,644,646,651,661,681,693,698,704,708,711,723,732,736,739,746,752,
		774,796,800,805,809,813,818,823,827,851,905,909,925,927,939,946,954,958,
		966,970,972,983,1005,1010,1020,1024,1030,1034,1040,1053,1060,1075,1084,
		1090,1094,1104,1109,1122,1126,1130,1134,1144,1147,1150,1154,1161,1170,
		1175,1180
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
